#!/usr/bin/env python2
# --------------------------------------------------------------------------------------------------
# HITCON CTF quals 2018 - EOP (RE 257)
# --------------------------------------------------------------------------------------------------

tbl_A = [
    # Constants for initialization
    0xC01A4D6E, 0xA4CB6636, 0x5B0F5BA1, 0x2B266926,

    # Constants for teardown
    0xEF75CB8F, 0xA037222A, 0xBA69619A, 0x60798932,
    
    # Constants for iterations
    0x026EA859, 0xF1315893, 0x8B5933A6, 0xE72BAC67, 0x1ACC8904, 0x2E48D1EF, 0x3F21D5AB, 0x69335A1F,
    0xBE8368F0, 0xF1F784C3, 0x18204990, 0x18CEA168, 0x33969157, 0x21EBF147, 0xFA7AF872, 0xABE6BE6C,
    0x514E617E, 0xEC773FC2, 0xC618C36A, 0xF9CEF7A4, 0x75DCB301, 0xAEE18C7A, 0x24F22669, 0x9ADB355F,
    0x774EE123, 0xC8F434A0, 0xF47E97EF, 0x43797DF7, 0xF6E46A45, 0x05B780D5, 0xE3E1BF40, 0x54DD7532
]

sub_A = [
    0x5656E70B, 0x4343FC17, 0xBBBB3771, 0x0808FE85, 0xD4D409D3, 0xE2E22BFB, 0xA2A2AD1E, 0x73732AB2,
    0xB3B3C9F4, 0x2D2D333C, 0x8C8CE4D0, 0xB7B7B602, 0x8D8D1559, 0x0606F48D, 0x8A8A105D, 0xBCBC3275,
    0xC6C617CB, 0xCFCF18C7, 0x9A9A853E, 0xAAAA539B, 0x4D4DF61F, 0xEAEAD57E, 0x48487860, 0xE0E0A080,
    0x2E2E49CE, 0x3F3F2D24, 0xC3C399B4, 0x1414EA95, 0xFBFBB194, 0x7575DE3F, 0xFAFA401D, 0xE8E85E05,
    0xCECEE94E, 0x2F2FB847, 0x2121B24F, 0x5F5FE807, 0x74742FB6, 0xC5C56D39, 0xDEDE7C2D, 0x4A4AF31B,
    0xE9E9AF8C, 0xB5B53D79, 0x77775544, 0xB1B1428F, 0x07070504, 0xADAD569F, 0x50501386, 0x4545089A,
    0xF2F2BE98, 0xCDCD93BC, 0x6B6B4154, 0xC8C81DC3, 0x9696044D, 0x666631AE, 0xB8B84D83, 0x1313EF91,
    0xC2C2683D, 0x92927BBB, 0x29294CCA, 0xAFAFDDE4, 0xBEBEB90E, 0x3939D9A9, 0x3B3B52D2, 0x2525CDB9,
    0xF0F035E3, 0x4F4F7D64, 0x2A2A3638, 0xFDFD4519, 0x9D9D803A, 0xD1D187AC, 0xD3D30CD7, 0x8B8BE1D4,
    0xB6B6478B, 0x02028B7B, 0x4444F913, 0x9F9F0B41, 0xE1E15109, 0x4141776C, 0x6C6C4450, 0x3131272C,
    0x1E1E9F6B, 0x1B1B1114, 0x98980E45, 0x5C5C92F5, 0x23233934, 0xEDEDD07A, 0x161661EE, 0xFCFCB490,
    0x8585EBDC, 0xECEC21F3, 0x8E8E6FAB, 0x2B2BC7B1, 0x4E4E8CED, 0x0B0B8477, 0x9797F5C4, 0x5858ED03,
    0x32325DDE, 0x474783E1, 0x0101F189, 0xAEAE2C6D, 0xE4E4DF76, 0x7E7E5A48, 0x91910149, 0xF7F730E7,
    0x7878AEC5, 0x9999FFCC, 0x6D6DB5D9, 0xA5A5A81A, 0x84841A55, 0xD6D682A8, 0xF6F6C16E, 0x616134AA,
    0x0C0C8173, 0x7B7BD437, 0x3434A953, 0x5B5B97F1, 0x4C4C0796, 0xDDDD06DF, 0x00000000, 0x19199A6F,
    0x7C7CD133, 0x93938A32, 0xACACA716, 0x0F0FFB81, 0xF5F5BB9C, 0x7F7FABC1, 0x3D3DA65F, 0x18186BE6,
    0x24243C30, 0xBABAC6F8, 0x494989E9, 0x95957EBF, 0x62624E58, 0x2222C8BD, 0x3A3AA35B, 0xB4B4CCF0,
    0xD2D2FD5E, 0xEFEF5B01, 0x8F8F9E22, 0xDFDF8DA4, 0xA3A35C97, 0x878760A7, 0x1D1DE599, 0x9B9B74B7,
    0x89896AAF, 0x5A5A6678, 0xD9D97929, 0xA1A1D7EC, 0x111164EA, 0x1F1F6EE2, 0xFFFFCE62, 0x9E9EFAC8,
    0x404086E5, 0xDCDCF756, 0x2626B74B, 0x55559DF9, 0x53536974, 0x15151B1C, 0xA7A72361, 0x5D5D637C,
    0xC1C112CF, 0x9090F0C0, 0xC9C9EC4A, 0x525298FD, 0xA0A02665, 0xCCCC6235, 0x2C2CC2B5, 0x8181942A,
    0xFEFE3FEB, 0x2828BD43, 0x38382820, 0x17179067, 0x59591C8A, 0x04047FF6, 0xC7C7E642, 0xE6E6540D,
    0x10109563, 0xE3E3DA72, 0x7676A4CD, 0x3C3C57D6, 0xB9B9BC0A, 0x70705040, 0xDADA03DB, 0x808065A3,
    0x0A0A75FE, 0x3E3EDCAD, 0x9C9C71B3, 0xEBEB24F7, 0xD8D888A0, 0x36362228, 0x05058E7F, 0x6A6AB0DD,
    0x46467268, 0x3030D6A5, 0x4B4B0292, 0x6363BFD1, 0xDBDBF252, 0x8686912E, 0x3333AC57, 0x1A1AE09D,
    0xC0C0E346, 0x7171A1C9, 0x54546C70, 0x6E6ECF2B, 0xF8F8CB66, 0x272746C2, 0x88889B26, 0x8282EED8,
    0x94948F36, 0x6060C523, 0xD5D5F85A, 0xD0D07625, 0x57571682, 0x202043C6, 0xE7E7A584, 0xB0B0B306,
    0x42420D9E, 0x79795F4C, 0x7D7D20BA, 0xA8A8D8E0, 0xC4C49CB0, 0xA4A45993, 0x6767C027, 0x0E0E0A08,
    0xABABA212, 0x7272DB3B, 0xBDBDC3FC, 0xCACA96B8, 0x0D0D70FA, 0xF9F93AEF, 0x5151E20F, 0xF1F1C46A,
    0x6969CA2F, 0xF4F44A15, 0x353558DA, 0x1C1C1410, 0xEEEEAA88, 0x3737D3A1, 0x7A7A25BE, 0x03037AF2,
    0xD7D77321, 0x65654B5C, 0x09090F0C, 0xE5E52EFF, 0xCBCB6731, 0x68683BA6, 0x6464BAD5, 0xB2B2387D,
    0xF3F34F11, 0xBFBF4887, 0x83831F51, 0x12121E18, 0xA6A6D2E8, 0x5E5E198E, 0xA9A92969, 0x6F6F3EA2
]

sub_B = [
    0x04050707, 0x50446C6C, 0xCF12C1C1, 0x43BD2828, 0x6EC1F6F6, 0x551A8484, 0x5FA63D3D, 0xFCC3BDBD,
    0xC8FA9E9E, 0x60784848, 0x5EFDD2D2, 0x2576D0D0, 0x07E85F5F, 0x8DF40606, 0x3562CCCC, 0x2173D7D7,
    0xBE257A7A, 0xF8C6BABA, 0xA7608787, 0xCE492E2E, 0xEA641111, 0x5C4B6565, 0x2A948181, 0xF4C9B3B3,
    0x0EB9BEBE, 0x8A1C5959, 0x6C774141, 0x38362A2A, 0xC0F09090, 0xFB2BE2E2, 0xE66B1818, 0x9359A4A4,
    0x6929A9A9, 0x9DE01A1A, 0x328A9393, 0x10141C1C, 0x54416B6B, 0x73810C0C, 0xA1D33737, 0xED8C4E4E,
    0x77840B0B, 0x7F8E0505, 0x81FB0F0F, 0x7C635D5D, 0xD70CD3D3, 0xDE5D3232, 0x4D049696, 0x154AF4F4,
    0x6B9F1E1E, 0x9F56ADAD, 0xC31DC8C8, 0x9CBBF5F5, 0x8748BFBF, 0x5BA33A3A, 0x450E9898, 0x3C332D2D,
    0x834DB8B8, 0x3D68C2C2, 0x975CA3A3, 0xA63B6868, 0xCB17C6C6, 0x88AAEEEE, 0xE8D2A6A6, 0x0951E1E1,
    0xE0D8A8A8, 0xA088D8D8, 0xAC87D1D1, 0xF67F0404, 0xFF2EE5E5, 0x6AC4F1F1, 0x7532BCBC, 0x1945FDFD,
    0xC2462727, 0xD6573C3C, 0x86135050, 0xD4E18B8B, 0x4C5F7979, 0x94B1FBFB, 0xCDA47676, 0x4FB22121,
    0xDA583535, 0x6F9A1919, 0x7D38B2B2, 0x242D3F3F, 0x99E51D1D, 0xCCFF9999, 0x9E0D4242, 0x080A0E0E,
    0x82165757, 0x91EF1313, 0x90B4FCFC, 0x647D4F4F, 0xECD7A1A1, 0x0ABCB9B9, 0x00000000, 0x3167CBCB,
    0xD1BF6363, 0x1C1B1515, 0x13F94444, 0xB896CACA, 0xC5AE7878, 0xA23E6F6F, 0x72DAE3E3, 0x706C5454,
    0x229E8F8F, 0x410B9F9F, 0xD2523B3B, 0x1FF64D4D, 0x57AC3333, 0xDB03DADA, 0x53A93434, 0x8B47B6B6,
    0x62CEFFFF, 0x06B3B0B0, 0x1BF34A4A, 0x96074C4C, 0xFA700D0D, 0x1AA8A5A5, 0x6123A7A7, 0x6D2CAEAE,
    0x47B82F2F, 0xBB7B9292, 0xB22A7373, 0xB09CC4C4, 0x3E859A9A, 0x511F8383, 0xE5864040, 0xF0CCB4B4,
    0x95EA1414, 0xDDB06A6A, 0x76DFE4E4, 0xAF6A8989, 0xAE316666, 0xFE750A0A, 0x46E3C0C0, 0xD0E48C8C,
    0x584E6262, 0x23C56060, 0x368F9494, 0x66CBF8F8, 0x28223636, 0x3BDB7272, 0xE9894949, 0x59158D8D,
    0xC1AB7F7F, 0x793DB5B5, 0x67901717, 0xA882D6D6, 0x3A809D9D, 0xFD985252, 0xF5925C5C, 0xC4F59797,
    0xAB6F8E8E, 0x7AD0EDED, 0xC9A17171, 0x92024B4B, 0x9B53AAAA, 0x8CAFE9E9, 0x7ED5EAEA, 0x0BE75656,
    0xA9D93939, 0xDF06DDDD, 0x63951010, 0xB499C3C3, 0x3FDE7575, 0xEF3AF9F9, 0x5D108A8A, 0x269B8888,
    0xE730F7F7, 0xAA346161, 0x2BCF6E6E, 0x44557777, 0x4BB72626, 0x7B8B0202, 0x02B6B7B7, 0x485A7E7E,
    0x303C2424, 0x14111B1B, 0xA48DDFDF, 0xA3658080, 0xE4DDAFAF, 0x1EADA2A2, 0x2E918686, 0x17FC4343,
    0x49019191, 0xBC93CDCD, 0x7137BBBB, 0x68724646, 0xB1C72B2B, 0x80A0E0E0, 0x0C0F0909, 0x16A7ACAC,
    0x89F10101, 0x6526A0A0, 0xDCEB8585, 0xADDC3E3E, 0x03ED5858, 0xB9CD2525, 0x98BEF2F2, 0x8F42B1B1,
    0x12A2ABAB, 0x52F2DBDB, 0xB7749B9B, 0x34392323, 0xF1975B5B, 0xB5C22C2C, 0x4EE9CECE, 0x5AF8D5D5,
    0x20283838, 0x2FCA6969, 0xA5D63030, 0x42E6C7C7, 0x2C273131, 0x27C06767, 0x015BEFEF, 0x055EE8E8,
    0x33D17C7C, 0xC6432020, 0xCA4C2929, 0x40507070, 0x114FF3F3, 0xEB3FFEFE, 0xF99D5555, 0x84A5E7E7,
    0xEE611616, 0x56F7DCDC, 0xE1834747, 0xBF7E9595, 0x85FE0808, 0xC718CFCF, 0xF27A0303, 0xD5BA6464,
    0xE335F0F0, 0x2D7CDEDE, 0x181E1212, 0x74695353, 0x4AECC9C9, 0xD8EE8282, 0x8E195E5E, 0xBA207D7D,
    0x2979D9D9, 0x9A084545, 0x396DC5C5, 0xD9B56D6D, 0x1D40FAFA, 0xB62F7474, 0x37D47B7B, 0x78665A5A,
    0xE26E1F1F, 0xF321ECEC, 0xF724EBEB, 0xBDC82222, 0xB3719C9C, 0xD309D4D4, 0x0FE25151, 0x0D54E6E6
]

sub_C = [
    0xBE0EBEB9, 0x22BD22C8, 0x29CA294C, 0xFB94FBB1, 0x4A1B4AF3, 0x7C337CD1, 0xFC90FCB4, 0x10631095,
    0x57825716, 0x3D5F3DA6, 0x4D1F4DF6, 0xBC75BC32, 0x66AE6631, 0x672767C0, 0x431743FC, 0x429E420D,
    0xE372E3DA, 0x560B56E7, 0x812A8194, 0xD3D7D30C, 0x151C151B, 0x459A4508, 0x057F058E, 0x3F243F2D,
    0x9EC89EFA, 0xEF01EF5B, 0x1A9D1AE0, 0x78C578AE, 0x73B2732A, 0xBF87BF48, 0xC1CFC112, 0x416C4177,
    0x5E8E5E19, 0x2430243C, 0xB90AB9BC, 0xE476E4DF, 0x04F6047F, 0xB006B0B3, 0x6FA26F3E, 0x602360C5,
    0x4F644F7D, 0xE784E7A5, 0x8BD48BE1, 0x9332938A, 0x284328BD, 0xD025D076, 0xB883B84D, 0x55F9559D,
    0xB68BB647, 0xC8C3C81D, 0xD4D3D409, 0x2BB12BC7, 0x0B770B84, 0x5D7C5D63, 0xC94AC9EC, 0x5BF15B97,
    0x1E6B1E9F, 0x8826889B, 0xE805E85E, 0xCC35CC62, 0x70407050, 0xD1ACD187, 0x9845980E, 0xBAF8BAC6,
    0x97C497F5, 0x6258624E, 0x71C971A1, 0x03F2037A, 0x63D163BF, 0xFD19FD45, 0x7DBA7D20, 0x89AF896A,
    0xF7E7F730, 0xB579B53D, 0x87A78760, 0x9F419F0B, 0x3BD23B52, 0x40E54086, 0x37A137D3, 0xE98CE9AF,
    0xC539C56D, 0x16EE1661, 0xD6A8D682, 0xA1ECA1D7, 0x2CB52CC2, 0xF59CF5BB, 0x6ADD6AB0, 0x6B546B41,
    0x82D882EE, 0xB702B7B6, 0xA21EA2AD, 0xCE4ECEE9, 0x0DFA0D70, 0xE109E151, 0xAE6DAE2C, 0xDC56DCF7,
    0xED7AEDD0, 0x49E94989, 0x46684672, 0xA8E0A8D8, 0xA065A026, 0x47E14783, 0x088508FE, 0x264B26B7,
    0x5F075FE8, 0x2ECE2E49, 0xD55AD5F8, 0x090C090F, 0xEA7EEAD5, 0x07040705, 0x0F810FFB, 0x1D991DE5,
    0x38203828, 0xE5FFE52E, 0x3EAD3EDC, 0x6C506C44, 0xB27DB238, 0x8EAB8E6F, 0x068D06F4, 0xE60DE654,
    0x7E487E5A, 0xAC16ACA7, 0x61AA6134, 0xD929D979, 0x723B72DB, 0x90C090F0, 0xCDBCCD93, 0xB3F4B3C9,
    0x6E2B6ECF, 0x5470546C, 0x7FC17FAB, 0x9A3E9A85, 0xDB52DBF2, 0xB18FB142, 0xEE88EEAA, 0x53745369,
    0x214F21B2, 0xCB31CB67, 0x9BB79B74, 0x27C22746, 0x32DE325D, 0x7B377BD4, 0x9CB39C71, 0xA493A459,
    0xD25ED2FD, 0xFF62FFCE, 0x25B925CD, 0x6DD96DB5, 0xF415F44A, 0x30A530D6, 0xDDDFDD06, 0x655C654B,
    0x48604878, 0x77447755, 0x312C3127, 0x510F51E2, 0xE2FBE22B, 0x80A38065, 0xA51AA5A8, 0x4B924B02,
    0x1B141B11, 0xC4B0C49C, 0x74B6742F, 0xF298F2BE, 0x139113EF, 0xF9EFF93A, 0x39A939D9, 0x3CD63C57,
    0x149514EA, 0xEBF7EB24, 0xAB12ABA2, 0x0E080E0A, 0x794C795F, 0x99CC99FF, 0x91499101, 0xC046C0E3,
    0x7ABE7A25, 0xC3B4C399, 0x0AFE0A75, 0x4EED4E8C, 0x5A785A66, 0xDE2DDE7C, 0xBDFCBDC3, 0x8351831F,
    0x52FD5298, 0x2D3C2D33, 0x027B028B, 0x36283622, 0x018901F1, 0xF866F8CB, 0x00000000, 0xBB71BB37,
    0x92BB927B, 0x753F75DE, 0x68A6683B, 0x9D3A9D80, 0xB4F0B4CC, 0xF311F34F, 0xC23DC268, 0x1C101C14,
    0x0C730C81, 0x2F472FB8, 0xA761A723, 0xCAB8CA96, 0x862E8691, 0xFEEBFE3F, 0x9436948F, 0x1FE21F6E,
    0x5CF55C92, 0x598A591C, 0x196F199A, 0x580358ED, 0xFA1DFA40, 0x4C964C07, 0xD8A0D888, 0xCFC7CF18,
    0xDFA4DF8D, 0xA969A929, 0xDADBDA03, 0x2A382A36, 0x441344F9, 0xC6CBC617, 0x76CD76A4, 0x35DA3558,
    0xF16AF1C4, 0x8A5D8A10, 0x964D9604, 0x50865013, 0x692F69CA, 0x345334A9, 0x8455841A, 0x1218121E,
    0x8D598D15, 0x85DC85EB, 0x17671790, 0xECF3EC21, 0x8CD08CE4, 0xA397A35C, 0x3A5B3AA3, 0xF0E3F035,
    0xC742C7E6, 0xF66EF6C1, 0x18E6186B, 0x11EA1164, 0x23342339, 0xE080E0A0, 0x95BF957E, 0x8F228F9E,
    0x64D564BA, 0xAA9BAA53, 0xA6E8A6D2, 0xAD9FAD56, 0xAFE4AFDD, 0x335733AC, 0xD721D773, 0x20C62043
]

sub_D = [
    0xC1F66EC1, 0x09D4D309, 0xB06ADDB0, 0x18CFC718, 0xE18BD4E1, 0xE48CD0E4, 0x68C23D68, 0xFDD25EFD,
    0xB1FB94B1, 0x7F04F67F, 0xF090C0F0, 0xD939A9D9, 0x5D32DE5D, 0x2BE2FB2B, 0x17C6CB17, 0x53AA9B53,
    0x1F83511F, 0x00000000, 0xC9B3F4C9, 0x840B7784, 0x2D3F242D, 0x4C29CA4C, 0xC822BDC8, 0x73D72173,
    0x975BF197, 0x94812A94, 0xD8A8E0D8, 0x4DB8834D, 0xBBF59CBB, 0x195E8E19, 0xF64D1FF6, 0x207DBA20,
    0x8347E183, 0x40FA1D40, 0xF597C4F5, 0xB7264BB7, 0x62CC3562, 0x8DDFA48D, 0xD17C33D1, 0x5BEF015B,
    0x87D1AC87, 0x88D8A088, 0x6F8EAB6F, 0x23A76123, 0xAE78C5AE, 0xD2A6E8D2, 0x1C598A1C, 0xC56023C5,
    0x1E12181E, 0x72466872, 0x2CAE6D2C, 0x111B1411, 0xDC3EADDC, 0xF8D55AF8, 0x750AFE75, 0x51E10951,
    0xD337A1D3, 0x6A89AF6A, 0x42B18F42, 0x04964D04, 0x8C4EED8C, 0xC3BDFCC3, 0xDAE372DA, 0x3AF9EF3A,
    0x37BB7137, 0x8A93328A, 0xFE0885FE, 0xC22CB5C2, 0x158D5915, 0x30F7E730, 0xCBF866CB, 0x749BB774,
    0x9E8F229E, 0x665A7866, 0x39233439, 0x1B151C1B, 0xECC94AEC, 0x29A96929, 0xF2DB52F2, 0x22362822,
    0x3166AE31, 0xF4068DF4, 0x859A3E85, 0x47B68B47, 0x7E95BF7E, 0x4FF3114F, 0xED5803ED, 0xE51D99E5,
    0x45FD1945, 0x925CF592, 0xE6C742E6, 0x3461AA34, 0x141C1014, 0x35F0E335, 0xAFE98CAF, 0x08459A08,
    0x27312C27, 0x05070405, 0x2EE5FF2E, 0xEF1391EF, 0x77416C77, 0xA8A51AA8, 0xD47B37D4, 0x0D429E0D,
    0xAC3357AC, 0xDB723BDB, 0xBD2843BD, 0x809D3A80, 0x6580A365, 0x0E98450E, 0x810C7381, 0xB82F47B8,
    0x7CDE2D7C, 0xDDAFE4DD, 0x79D92979, 0xFC4317FC, 0x8640E586, 0x6411EA64, 0x8B027B8B, 0x8F94368F,
    0xE2510FE2, 0x6B18E66B, 0x2A73B22A, 0x12C1CF12, 0xA0E080A0, 0xDFE476DF, 0x5F794C5F, 0x99C3B499,
    0xA5E784A5, 0x492ECE49, 0xF94413F9, 0xD7A1ECD7, 0xE7560BE7, 0xA476CDA4, 0x635D7C63, 0x257ABE25,
    0xF34A1BF3, 0x67CB3167, 0xEE82D8EE, 0xA63D5FA6, 0xC72BB1C7, 0xC06727C0, 0x074C9607, 0x6E1FE26E,
    0xAAEE88AA, 0xCD25B9CD, 0x6116EE61, 0x0CD3D70C, 0xB56DD9B5, 0x54E60D54, 0x1DC8C31D, 0x93CDBC93,
    0x4320C643, 0xCEFF62CE, 0x719CB371, 0x573CD657, 0x4B655C4B, 0xB6B702B6, 0x95106395, 0x6087A760,
    0x5835DA58, 0x82D6A882, 0xEA1495EA, 0x1A84551A, 0xFB0F81FB, 0x56AD9F56, 0xE01A9DE0, 0x3E6FA23E,
    0x06DDDF06, 0x8949E989, 0x24EBF724, 0x7A03F27A, 0x416B5441, 0xE3C046E3, 0x91862E91, 0x28382028,
    0x9D55F99D, 0xD5EA7ED5, 0x4627C246, 0x6C54706C, 0x21ECF321, 0x50704050, 0x5A7E485A, 0xDE753FDE,
    0x26A06526, 0x48BF8748, 0xB2214FB2, 0xD0ED7AD0, 0x362A3836, 0xAB7FC1AB, 0xBF63D1BF, 0xA93453A9,
    0x5EE8055E, 0x32BC7532, 0x01914901, 0x3FFEEB3F, 0x55774455, 0x38B27D38, 0xC6BAF8C6, 0xFF99CCFF,
    0xADA21EAD, 0x5CA3975C, 0x024B9202, 0x76D02576, 0xA2AB12A2, 0xE85F07E8, 0x3B68A63B, 0xB4FC90B4,
    0xF10189F1, 0x0A0E080A, 0xCF6E2BCF, 0x700DFA70, 0xD630A5D6, 0x7D4F647D, 0x0B9F410B, 0x59A49359,
    0xEB85DCEB, 0x03DADB03, 0x3DB5793D, 0x446C5044, 0x4AF4154A, 0xF7DC56F7, 0x6DC5396D, 0x7B92BB7B,
    0x523BD252, 0x9F1E6B9F, 0x8E057F8E, 0x9852FD98, 0x69537469, 0xBCB90ABC, 0x332D3C33, 0xBA64D5BA,
    0x78486078, 0xB9BE0EB9, 0xA33A5BA3, 0x3C24303C, 0x0F090C0F, 0x96CAB896, 0xA171C9A1, 0xBEF298BE,
    0xCA692FCA, 0x2F74B62F, 0x90176790, 0xC4F16AC4, 0xCCB4F0CC, 0xFA9EC8FA, 0x108A5D10, 0x9CC4B09C,
    0xE9CE4EE9, 0x9B88269B, 0x9A196F9A, 0x13508613, 0x4E62584E, 0xA7AC16A7, 0x16578216, 0xB3B006B3
]


# --------------------------------------------------------------------------------------------------
# Lambdas to extart the i-th byte from a DWORD
B1 = lambda x: x & 0xff
B2 = lambda x: (x >> 8) & 0xff
B3 = lambda x: (x >> 16) & 0xff
B4 = lambda x: (x >> 24) & 0xff

# --------------------------------------------------------------------------------------------------
# ROL and ROR instructions for 32 bits
rol = lambda a, b: ((a << b) & 0xffffffff) | (a >> (32 - b))
ror = lambda a, b: (a >> b) | ((a << (32 - b)) & 0xffffffff)

# --------------------------------------------------------------------------------------------------
# list to int
ltoi = lambda x: x[0] | (x[1] << 8) | (x[2] << 16) | (x[3] << 24)


# --------------------------------------------------------------------------------------------------
# Encrypt a 16 byte plaitext block
def encrypt_block(plain):
    print '[+] Encrypting block:', ' '.join('%02X' % p for p in plain)

    A = ltoi(plain[ 0: 4]) ^ tbl_A[0]
    B = ltoi(plain[ 4: 8]) ^ tbl_A[1]
    C = ltoi(plain[ 8:12]) ^ tbl_A[2]
    D = ltoi(plain[12:16]) ^ tbl_A[3]


    print '[+] Init: A:%08X, B:%08X, C:%08X, D:%08X' % (A, B, C, D)

    for i in xrange(8, 40, 4):
        # Round 1
        E = sub_A[B1(A)] ^ sub_B[B2(A)] ^ sub_C[B3(A)] ^ sub_D[B4(A)]       
        F = sub_A[B4(B)] ^ sub_B[B1(B)] ^ sub_C[B2(B)] ^ sub_D[B3(B)]

        C ^= (E + F + tbl_A[i]) & 0xFFFFFFFF

        C = ror(C, 1)
        D = rol(D, 1)

        D ^= (2*F + E + tbl_A[i+1]) & 0xFFFFFFFF

        # Round 2
        E = sub_A[B1(C)] ^ sub_B[B2(C)] ^ sub_C[B3(C)] ^ sub_D[B4(C)]
        F = sub_A[B4(D)] ^ sub_B[B1(D)] ^ sub_C[B2(D)] ^ sub_D[B3(D)]

        A ^= (E + F + tbl_A[i+2]) & 0xFFFFFFFF

        A = ror(A, 1)
        B = rol(B, 1)

        B ^= (2*F + E + tbl_A[i+3]) & 0xFFFFFFFF        


        print '[+] Round %d: A:%08X, B:%08X, C:%08X, D:%08X, E:%08X, F:%08X' % (
                    (i - 8) >> 2, A, B, C, D, E, F)

    C ^= tbl_A[4]
    D ^= tbl_A[5]
    A ^= tbl_A[6]
    B ^= tbl_A[7]

    print '[+] Final: A:%08X, B:%08X, C:%08X, D:%08X' % (A, B, C, D)

    cipher = []
    for i in [C, D, A, B]:
        for j in xrange(0, 32, 8):
            cipher.append(((i >> j) & 0xFF))   

    return cipher


# --------------------------------------------------------------------------------------------------
# Decrypt a ciphertext block
def decrypt_block(cipher):
    print '[+] Decrypting block:', ' '.join('%02X' % c for c in cipher)

    C = ltoi(cipher[ 0: 4]) ^ tbl_A[4]
    D = ltoi(cipher[ 4: 8]) ^ tbl_A[5]
    A = ltoi(cipher[ 8:12]) ^ tbl_A[6]
    B = ltoi(cipher[12:16]) ^ tbl_A[7]

    print '[+] Init: A:%08X, B:%08X, C:%08X, D:%08X' % (A, B, C, D)

    for i in xrange(36, 4, -4):
        # Round 2
        E = sub_A[B1(C)] ^ sub_B[B2(C)] ^ sub_C[B3(C)] ^ sub_D[B4(C)]
        F = sub_A[B4(D)] ^ sub_B[B1(D)] ^ sub_C[B2(D)] ^ sub_D[B3(D)]

        A = rol(A, 1)
        A ^= (E + F + tbl_A[i+2]) & 0xFFFFFFFF

        B ^= (2*F + E + tbl_A[i+3]) & 0xFFFFFFFF
        B = ror(B, 1)

        # Round 1
        E = sub_A[B1(A)] ^ sub_B[B2(A)] ^ sub_C[B3(A)] ^ sub_D[B4(A)]       
        F = sub_A[B4(B)] ^ sub_B[B1(B)] ^ sub_C[B2(B)] ^ sub_D[B3(B)]

        C = rol(C, 1)
        C ^= (E + F + tbl_A[i]) & 0xFFFFFFFF

        
        D ^= (2*F + E + tbl_A[i+1]) & 0xFFFFFFFF
        D = ror(D, 1)


        print '[+] Round %d: A:%08X, B:%08X, C:%08X, D:%08X, E:%08X, F:%08X' % (
                    (i - 8) >> 2, A, B, C, D, E, F)

    A ^= tbl_A[0]
    B ^= tbl_A[1]
    C ^= tbl_A[2]
    D ^= tbl_A[3]

    print '[+] Final: A:%08X, B:%08X, C:%08X, D:%08X' % (A, B, C, D)

    plain = []
    for i in [A, B, C, D]:
        for j in xrange(0, 32, 8):
            plain.append(((i >> j) & 0xFF))   

    return plain



# --------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    print '[+] EOP crack started.'


    # -------------------------------------------------------------------------
    # Encrypt example
    # -------------------------------------------------------------------------
    pwd = 'KYRIAKOS123456789012345678901234567890ABCDEFGHIJ'
    pwd = [ord(p) for p in pwd]

    plain1 = pwd[0:16]
    cipher1 = encrypt_block(plain1)
    print '[+] Cipher block #1:', ''.join('%02X' % c for c in cipher1)

    plain2 = [pwd[16+i] ^ cipher1[i] for i in xrange(16)]
    cipher2 = encrypt_block(plain2)
    print '[+] Cipher block #2:', ''.join('%02X' % c for c in cipher2)

    plain3 = [pwd[32+i] ^ cipher2[i] for i in xrange(16)]
    cipher3 = encrypt_block(plain3)    
    print '[+] Cipher block #3:', ''.join('%02X' % c for c in cipher3)

    print '[+] Encrypted password:', ''.join('%02X' % c for c in cipher1 + cipher2 + cipher3)

    # -------------------------------------------------------------------------
    # Crack hash
    # -------------------------------------------------------------------------
    # The cipher for exmaple password (KYRIAKOS123456789012345678901234567890ABCDEFGHIJ)
    target_cipher = [
        0xCA, 0xC4, 0x64, 0x68, 0xC6, 0x9C, 0xC1, 0x63,
        0x47, 0x5C, 0x23, 0x87, 0x36, 0x14, 0xCA, 0x1D,
        0xDF, 0xEE, 0x1D, 0xE3, 0xA9, 0x14, 0x32, 0x4F,
        0xFA, 0xB4, 0x02, 0xE8, 0x4E, 0x3D, 0x17, 0xBD,
        0xEE, 0xFC, 0xF4, 0x15, 0x96, 0xEB, 0xF6, 0x97,
        0x19, 0x20, 0x0C, 0x9F, 0x8D, 0xE6, 0xBC, 0x4B
    ]

    target_cipher = [
        0x4F, 0x6F, 0xA7, 0x87, 0xE9, 0x51, 0x87, 0x64,
        0x38, 0x2A, 0x46, 0xE5, 0x4F, 0x21, 0x9E, 0x1C,
        0xCD, 0x65, 0xE1, 0x9A, 0x4F, 0xCF, 0xDE, 0x52,
        0x09, 0xBF, 0x53, 0xC4, 0xB0, 0x95, 0x75, 0x31,
        0xAC, 0x2F, 0xF4, 0x97, 0x1D, 0xA5, 0x9A, 0x02,
        0xA8, 0xFF, 0xAE, 0x2E, 0xB9, 0x70, 0xCC, 0x02
    ]

    print '[+] Cracking Cipher:', ''.join('%02X' % c for c in target_cipher)


    inter3 = decrypt_block(target_cipher[32:])
    print '[+] Intermediate block #3:', ''.join('%02X' % c for c in inter3)
    
    plain3 = [target_cipher[16+i] ^ inter3[i] for i in xrange(16)]
    print '[+] Plaintext block #3:', ''.join('%c' % c for c in plain3)

    inter2 = decrypt_block(target_cipher[16:32])
    print '[+] Intermediate block #2:', ''.join('%02X' % c for c in inter2)

    plain2 = [target_cipher[i] ^ inter2[i] for i in xrange(16)]
    print '[+] Plaintext block #2:', ''.join('%c' % c for c in plain2)

    inter1 = decrypt_block(target_cipher[:16])
    print '[+] Intermediate block #1:', ''.join('%02X' % c for c in inter1)

    plain1 = inter1
    print '[+] Plaintext block #1:', ''.join('%c' % c for c in plain1)


    print '[+] Final Password:', ''.join('%c' % c for c in plain1 + plain2 + plain3)


# --------------------------------------------------------------------------------------------------
'''
ispo@nogirl:~/ctf/hitcon_ctf_2018/eop$ ./eop_crack.py 
[+] EOP crack started.
[+] Encrypting block: 4B 59 52 49 41 4B 4F 53 31 32 33 34 35 36 37 38
[+] Init: A:89481425, B:F7842D77, C:6F3C6990, D:13115F13
[+] Round 0: A:CED04DDC, B:EB69E915, C:62EAECC5, D:A4BB13B0, E:F5E8B059, F:93A6AB9D
[+] Round 1: A:08052E8C, B:DF976033, C:09A20D77, D:ED53293A, E:9F5F1E39, F:00591CE0
[+] Round 2: A:B1BB23D7, B:7749F158, C:622B9BBC, D:37CA56D5, E:F70DAF4F, F:5C457044
[+] Round 3: A:EC7701A2, B:3EDB9F45, C:F00993AF, D:145DCDD8, E:B95290B7, F:B5879769
[+] Round 4: A:5681A70B, B:56DCD98F, C:F7E80BE7, D:31BF80B9, E:C51A2933, F:B6416317
[+] Round 5: A:90E1F40E, B:7EB28EC2, C:DECBB3F5, D:535D94F7, E:6C7048DD, F:E5DFDFD0
[+] Round 6: A:DA2ED8BB, B:9B840F7F, C:5A607A6C, D:50483179, E:3D13C610, F:F329E77A
[+] Round 7: A:3D4A3DDD, B:7DB39D04, C:87110F45, D:C3F6BEEC, E:83D3B8B9, F:39052B08
[+] Final: A:87235C47, B:1DCA1436, C:6864C4CA, D:63C19CC6
[+] Cipher block #1: CAC46468C69CC163475C23873614CA1D
[+] Encrypting block: F3 F4 55 5A F5 A8 F4 55 70 64 1A B7 07 26 F9 29
[+] Init: A:9A4FB99D, B:F13FCEC3, C:EC153FD1, D:02DF4F21
[+] Round 0: A:9005F10D, B:742A4C4A, C:3B373E77, D:EA0A9C12, E:AEAC2A5A, F:803EFD86
[+] Round 1: A:8E610976, B:580DA65E, C:9C4A5462, D:61369FBD, E:542637BF, F:F97FD676
[+] Round 2: A:A0C3ADA9, B:FFA1031E, C:0CB2BEC3, D:921C519F, E:38A062F0, F:7F25A5A5
[+] Round 3: A:2EBF3C9C, B:D49306E9, C:5B1DA0DD, D:BD1D77CD, E:869B75D6, F:7CA76649
[+] Round 4: A:28B74374, B:C7F07565, C:201F2193, D:3A8F49B8, E:FE6A6D02, F:BB4E8A08
[+] Round 5: A:D7C920A5, B:B184CADA, C:88B49678, D:127F8642, E:20DCCCFA, F:41560EDC
[+] Round 6: A:71EC1645, B:0D44F44B, C:9DAC9723, D:4BD467DF, E:54510479, F:EB416FC7
[+] Round 7: A:526BD560, B:DD6EB47C, C:0C682550, D:EF053683, E:6FAA12D2, F:81AFEA73
[+] Final: A:E802B4FA, B:BD173D4E, C:E31DEEDF, D:4F3214A9
[+] Cipher block #2: DFEE1DE3A914324FFAB402E84E3D17BD
[+] Encrypting block: EA D8 2A DB 90 24 73 0D B9 F0 47 AE 09 75 5E F7
[+] Init: A:1B309584, B:A9B842A6, C:F548AB18, D:DC781C2F
[+] Round 0: A:576A4574, B:A193442D, C:BE602FDF, D:226CF070, E:495DC293, F:E12D2933
[+] Round 1: A:0390040C, B:CC1B7A74, C:7685CB30, D:CC6E980B, E:FC465772, F:14E2204F
[+] Round 2: A:FDDE1CD1, B:95631AAC, C:303F243E, D:E1D4F326, E:CB909B61, F:147B58BE
[+] Round 3: A:E4EB031B, B:02178521, C:3B48D776, D:158348C0, E:F62F52DC, F:435DCF98
[+] Round 4: A:FE26AA3E, B:FCE0E6B2, C:9E09D75D, D:AD8E84EB, E:A61A32AC, F:AC736150
[+] Round 5: A:45E202B9, B:7F018AC4, C:96951BA4, D:9B731CDB, E:B5FBFF84, F:9AF4895F
[+] Round 6: A:12E471AC, B:D1CF94B9, C:6777694D, D:0551A1C9, E:EB0590AA, F:80A6B948
[+] Round 7: A:25654183, B:2BC56FBF, C:FA813761, D:37C1C9BC, E:B51D953A, F:BF2F9E30
[+] Final: A:9F0C2019, B:4BBCE68D, C:15F4FCEE, D:97F6EB96
[+] Cipher block #3: EEFCF41596EBF69719200C9F8DE6BC4B
[+] Encrypted password: CAC46468C69CC163475C23873614CA1DDFEE1DE3A914324FFAB402E84E3D17BDEEFCF41596EBF69719200C9F8DE6BC4B
[+] Cracking Cipher: 4F6FA787E9518764382A46E54F219E1CCD65E19A4FCFDE5209BF53C4B0957531AC2FF4971DA59A02A8FFAE2EB970CC02
[+] Decrypting block: AC 2F F4 97 1D A5 9A 02 A8 FF AE 2E B9 70 CC 02
[+] Init: A:94C79E32, B:62B5F98B, C:7881E423, D:A2AD8737
[+] Round 7: A:BC3E73CB, B:14A71183, C:262DD0B5, D:E9749EF2, E:5606235F, F:8A438B4F
[+] Round 6: A:4C3F145B, B:B352DC28, C:D4A58F24, D:4ED01B4F, E:977E268A, F:8A3126A1
[+] Round 5: A:49B591D8, B:214EC05D, C:97938CE0, D:79809B6B, E:83081E31, F:45F3C177
[+] Round 4: A:2F283914, B:A4E450A5, C:004731BA, D:6BFCF71E, E:FA215865, F:E3F06E98
[+] Round 3: A:96CCE9D1, B:2C394CB0, C:707FC794, D:572DA77B, E:D6FA5E71, F:6660B518
[+] Round 2: A:2633E9EC, B:41283D24, C:A5A9CF17, D:4888302D, E:395F6C40, F:4D736B0F
[+] Round 1: A:3FE97D07, B:45F19B22, C:1E64DEF9, D:26AE26CF, E:9D49C3E0, F:9D20F3F2
[+] Round 0: A:6AB447F1, B:D766C21A, C:C133B889, D:353CA2C9, E:9B70AF7A, F:601AADA8
[+] Final: A:AAAE0A9F, B:73ADA42C, C:9A3CE328, D:1E1ACBEF
[+] Intermediate block #3: 9F0AAEAA2CA4AD7328E33C9AEFCB1A1E
[+] Plaintext block #3: RoO0cks!!\o^_^o/
[+] Decrypting block: CD 65 E1 9A 4F CF DE 52 09 BF 53 C4 B0 95 75 31
[+] Init: A:7E3ADE93, B:510C1C82, C:7594AE42, D:F2E9ED65
[+] Round 7: A:B1EC9141, B:9F5FD9AE, C:8FDDD18B, D:40333376, E:6F483AE0, F:FEC7E7EA
[+] Round 6: A:9B6324B6, B:B638A030, C:7E473D7E, D:B69DD5CD, E:7147163F, F:7966A707
[+] Round 5: A:2BAB5C5E, B:CF5B92AF, C:5B427750, D:86A669A4, E:56EF3B4C, F:DB001F5F
[+] Round 4: A:90B2ABFD, B:84C89FD6, C:26F0AF1C, D:1B00BEDE, E:BA1BEC26, F:8509F418
[+] Round 3: A:EDFF52AB, B:972681CE, C:28D4C12A, D:D9037631, E:DC23BA00, F:557B53BB
[+] Round 2: A:5BD5BA97, B:F73015B5, C:1CD055AD, D:50C366D2, E:975EA740, F:F797C7C9
[+] Round 1: A:4C7B3DA5, B:22D28616, C:8F0635A7, D:D25ADC20, E:71861F4E, F:2A53F6AB
[+] Round 0: A:6AD94716, B:A77C458F, C:D32410EB, D:49812600, E:454C6F09, F:856D6442
[+] Final: A:AAC30A78, B:03B723B9, C:882B4B4A, D:62A74F26
[+] Intermediate block #2: 780AC3AAB923B7034A4B2B88264FA762
[+] Plaintext block #2: 7ed-Pr0grammin9~
[+] Decrypting block: 4F 6F A7 87 E9 51 87 64 38 2A 46 E5 4F 21 9E 1C
[+] Init: A:5F2F4BA2, B:7CE7A87D, C:68D2A4C0, D:C4B073C3
[+] Round 7: A:89F6F564, B:29A0ECDD, C:F3B6471B, D:BFF2E4D2, E:A0BF0F1B, F:8A6F953B
[+] Round 6: A:8CB20DDC, B:86BFDB84, C:F45730FE, D:620D151D, E:84E52104, F:1707BCA2
[+] Round 5: A:067F9B12, B:D7F473B6, C:60FEFD20, D:B10B0521, E:D3AE40D4, F:3EC5A908
[+] Round 4: A:8206A9BC, B:25264D42, C:009FCD89, D:F236F076, E:7738068C, F:F8DBCFBF
[+] Round 3: A:A12B8FE1, B:0AE9BF44, C:DEB828C2, D:E6BE1C06, E:3A836DBE, F:716DB4BB
[+] Round 2: A:9C693660, B:55FDA033, C:227919E8, D:A36AC83F, E:1297B744, F:CDEE2839
[+] Round 1: A:DCBD6A2E, B:5692B0D8, C:CD3EEBC6, D:3C693174, E:3090C53C, F:3E6F89D6
[+] Round 0: A:A3620810, B:CDFC1605, C:14223591, D:45150054, E:52D09A3D, F:39209F86
[+] Final: A:6378457E, B:69377033, C:4F2D6E30, D:6E336972
[+] Intermediate block #1: 7E45786333703769306E2D4F7269336E
[+] Plaintext block #1: ~Exc3p7i0n-Ori3n
[+] Final Password: ~Exc3p7i0n-Ori3n7ed-Pr0grammin9~RoO0cks!!\o^_^o/
'''
# --------------------------------------------------------------------------------------------------
