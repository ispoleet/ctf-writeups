#!/usr/bin/env python3
# ----------------------------------------------------------------------------------------
# Plaid CTF 2021 - minipokemon (RE 450)
# ----------------------------------------------------------------------------------------
charmap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789{}'


xor_buf = [
    0x0f, 0x39, 0x2a, 0x09, 0x35, 0x3a, 0x00, 0x3b,
    0x33, 0x0a, 0x21, 0x03, 0x3a, 0x3a, 0x11, 0x0c,
    0x3c, 0x3c, 0x0d, 0x3c, 0x0d, 0x00, 0x09, 0x36
]


corners = [
    0x00, 0x00,
    0x02, 0x00,
    0x06, 0x02,
    0x02, 0x06,
    0x07, 0x06,
    0x01, 0x07,
    0x08, 0x07
]


edges = [
    0x04, 0x00,
    0x00, 0x03,
    0x03, 0x03,
    0x04, 0x03,
    0x02, 0x04,
    0x07, 0x04,
    0x08, 0x04,
    0x03, 0x05,
    0x05, 0x05,
    0x06, 0x05,
    0x03, 0x08,
    0x04, 0x08,
    0x03, 0x09,
    0x06, 0x09,
]


# ----------------------------------------------------------------------------------------
def coords_to_flag(buf_b):
    """Converts a buf_b back to an initial flag."""
    assert len(buf_b) == 42  # Consider buf_b before the appending.

    print('[+] Converting:', ' '.join('%d' % x for x in buf_b))
    buf_a = [0]*24
    for n in buf_b[::-1]:
        buf_a = [a*10 for a in buf_a]
        buf_a[0] += n

        # Adjust numbers.
        for i in range(len(buf_a)): 
            if buf_a[i] >= 64:
                buf_a[i+1] += buf_a[i] // 64
                buf_a[i]    = buf_a[i] %  64                

    print('[+] buf_a (inverted):', ' '.join('%d' % x for x in buf_b))
    buf_a = buf_a[::-1]

    buf_a = [buf_a[j] ^ xor_buf[j] for j in range(24)]
    print('[+] buf_a (XORed):', ' '.join('%02d' % x for x in buf_a))

    flag = ''.join(charmap[a] for a in buf_a)
    
    print('[+] Flag:', flag)

    return flag


# ----------------------------------------------------------------------------------------
def print_buf_c(buf_c):
    """Prints buf_c as a 10x10 grid."""
    print('    0   1   2   3   4   5   6   7   8   9')
    print('  +---------------------------------------+')
    for i in range(10):
        print(f'{i} ' + '| ' + ' | '.join(
            ('%d' % d) if d else ' ' for d in buf_c[i*10:(i+1)*10]) + ' |')
    print('  +---------------------------------------+')


# ----------------------------------------------------------------------------------------
def abort(msg):
    print(f'[!] Error. {msg}')
    return False


# ----------------------------------------------------------------------------------------
def verify_flag(flag, check=True):
    """Flag verification algorithm at loc_0x002C95."""
    print(f'[+] Verifying Flag: {flag}')

    # Step 1: Convert each character from flag into a [0, 63] value.
    buf_a = [charmap.index(f) for f in flag]

    print('[+] Init  buf_a:', ' '.join('%02X' % x for x in buf_a))

    # Step 2: XOR buf_a with a constant array.
    # (author did this step to easily map any flag value to the correct solution)
    buf_a = [buf_a[j] ^ xor_buf[j] for j in range(24)]
    print('[+] XORed buf_a:', ' '.join('%02d' % x for x in buf_a))

    # Step 3: Convert buf_a into a set of coordinates (x, y)
    # This is a division modulo 10 on a 64-base system.
    buf_b = [0]*46

    for i in range(42):
        a = 0
        for j in range(24):
            a = buf_a[j] + a*64
            buf_a[j] = a // 10
            a %= 10

        buf_b[i] = a  # a is in range 0-9.

    print('[+] DIVed buf_a:', ' '.join('%02X' % x for x in buf_a))

    # Check 1: Ensure that buf_a has no leftovers.
    if check:
        if not all(a == 0 for a in buf_a):
            return abort('buf_a is not 0')

    # Step 4: Append the first 4 points at the end.
    # (It's because we start from offset 2).
    for i in range(4): 
        buf_b[42 + i] = buf_b[i]

    print('[+] Init  buf_b:', ' '.join('%d' % x for x in buf_b))

    # Check 2: Ensure that all points are "after" the first.
    # All points form a circle. We need to have an order in them.    
    if check:
        c0 = buf_b[2]*10 + buf_b[3]
        for i in range(1, 22):
            c1 = buf_b[2*i - 1]*10 + buf_b[2*i]
            if c1 < c0:
                return abort(f'Point {c1} before {c0}')

            c2 = buf_b[2*i + 1]*10 + buf_b[2*i]
            if c2 < c0:
                return abort(f'Point {c2} before {c0}')

    # Check 3: Ensure that both directions are changing in each step.
    if check:    
        for i in range(1, 22):
            if buf_b[2*i]     == buf_b[2*i + 2]:
                return abort(
                    f'Same x ({buf_b[2*i]}) at positions {2*i} and {2*i+2}')
             
            if buf_b[2*i + 1] == buf_b[2*i + 3]:
                return abort(
                    f'Same y ({buf_b[2*i + 1]}) at positions {2*i+1} and {2*i+3}')
         

    # Step 5 (final): Connect the points! (draw lines)
    # Numbers in buf_b are in range [0, 10), so buf_c has size 10x10.
    buf_c = [0]*100
    for i in range(1, 22):
        c5 = buf_b[2*i + 1]*10 + buf_b[2*i]  # (x, y)
        print('[+] Iter #{4}. Connecting points: ({0},{1}) ~> ({2},{3})'.format(
            buf_b[2*i], buf_b[2*i + 1], buf_b[2*i + 2], buf_b[2*i + 3], i))

        if buf_c[c5] != 0:
            return abort(f'#1 Cell {c5} is already assigned!')

        # Check we move to the right or to the left.
        if buf_b[2*i] < buf_b[2*i + 2]:
            if buf_b[2*i - 1] < buf_b[2*i + 1]:
                buf_c[c5] = 2  # right + up
            else:                
                buf_c[c5] = 1  # right + down

            # Draw the line over x axis.        
            for j in range(1, buf_b[2*i + 2] - buf_b[2*i]):
                # We can imply that lines can't overlap!                
                if buf_c[c5 + j] != 0:
                    return abort(f'#2 Cell {c5} is already assigned!')
                buf_c[c5 + j] = 5
        else:   
            if buf_c[2*i - 1] < buf_b[2*i + 1]:                
                buf_c[c5] = 4  # left + up
            else:                
                buf_c[c5] = 3  # left + down

            for j in range(1, buf_b[2*i] - buf_b[2*i + 2]):
                if buf_c[c5 - j] != 0:
                    return abort(f'#3 Cell {c5} is already assigned!')
                buf_c[c5 - j] = 5

        # Now, draw the line on the y axis.
        c7 = buf_b[2*i + 1]*10 + buf_b[2*i + 2]
        if buf_c[c7] != 0:
            print(f'[!] #4 Cell {c7} is already assigned!')
            return False    
        
        if buf_b[2*i + 1] < buf_b[2*i + 3]:
            if buf_b[2*i] < buf_b[2*i + 2]:
                buf_c[c7] = 3  # down + left
            else:
                buf_c[c7] = 1  # down + right

            for j in range(1, buf_b[2*i + 3] - buf_b[2*i + 1]):
                if buf_c[c7 + j*10] != 0:
                    return abort(f'#5 Cell {c7} is already assigned!')
                buf_c[c7 + j*10] = 6
        else:
            if buf_b[2*i] < buf_b[2*i + 2]:
                buf_c[c7] = 4  # up + left
            else:
                buf_c[c7] = 2  # up + right

            for j in range(1, buf_b[2*i + 1] - buf_b[2*i + 3]):
                if buf_c[c7 - j*10] != 0:
                    return abort(f'#6 Cell {c7} is already assigned!')
                buf_c[c7 - j*10] = 6
        
        print_buf_c(buf_c)
        # break

    # Final Check 1: Verify corner location.
    if check:
        for i in range(0, 7):
            x0 = corners[2*i + 1]*10 + corners[2*i]

            # Looks like we're moving up/down/left/right in a 2D map.
            if buf_c[x0] == 1:
                if buf_c[x0 + 1]  != 5 and buf_c[x0 + 1]  != 6:
                     return abort(f'Corner #1 failed')
                if buf_c[x0 + 10] != 5 and buf_c[x0 + 10] != 6:
                     return abort(f'Corner #1 failed')

            elif buf_c[x0] == 2:
                if buf_c[x0 + 1]  != 5 and buf_c[x0 + 1]  != 6:
                    return abort(f'Corner #2 failed')
                if buf_c[x0 - 10] != 5 and buf_c[x0 - 10] != 6:
                    return abort(f'Corner #2 failed')

            elif buf_c[x0] == 3:
                if buf_c[x0 - 1]  != 5 and buf_c[x0 - 1]  != 6:
                    return abort(f'Corner #3 failed')
                if buf_c[x0 + 10] != 5 and buf_c[x0 + 10] != 6:
                    return abort(f'Corner #3 failed')

            elif buf_c[x0] == 4:
                if buf_c[x0 - 1]  != 5 and buf_c[x0 - 1]  != 6:
                    return abort(f'Corner #4 failed')
                if buf_c[x0 - 10] != 5 and buf_c[x0 - 10] != 6:
                    return abort(f'Corner #4 failed')
            else:
                return abort(f'Invalid corner value')

    # Final Check 2: Verify edge location.
    for i in range(0, 14):
        z0 = edges[2*i] + edges[2*i + 1] * 10

        # This cell must be the first or the last in the edge.
        if buf_c[z0] == 5:
            if buf_c[z0 + 1] != 5: break
            if buf_c[z0 - 1] != 5: break
            return abort(f'Edge #1 failed')

        elif buf_c[z0] == 6:
            if buf_c[z0 + 10] != 6: break
            if buf_c[z0 - 10] != 6: break
            return abort(f'Edge #2 failed')
        else:
            return abort(f'Invalid edge value')
    
    return True  # Goodboy message :)


# ----------------------------------------------------------------------------------------
if __name__ == "__main__":
    print('[+] Minipokemon Crack Started.')

    # ----------------------------------------------------------
    # Visualize target map.
    # ----------------------------------------------------------
    print('[+] Target Map:')

    trg_map = [
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
        [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
    ]

    for i in range(0, 7):
        x, y = corners[2*i], corners[2*i + 1]
        trg_map[y][x] = 'x'

    for i in range(0, 14):
        x, y = edges[2*i], edges[2*i + 1]
        trg_map[y][x] = '.'

    print('    0   1   2   3   4   5   6   7   8   9')
    print('  +---------------------------------------+')
    for i in range(10):
        print(f'{i} ' + '| ' + ' | '.join(trg_map[i]) + ' |')                
    print('  +---------------------------------------+')

    # ----------------------------------------------------------
    # Create a map based on a flag
    # ----------------------------------------------------------
    print('[+] Visualizing target coordinates:')

    buf_b = [  # Coordinates used to generate a path that goes
        1, 4,  # through target corners and edges.
        0, 0,
        2 ,2,
        3, 6,
        4, 2,
        5, 6,
        6, 2,
        8, 1,
        3, 0,
        9, 5,
        8, 3,
        7, 6,
        9, 9,
        8, 7,
        6, 8,
        7, 9,
        2, 8,
        5, 7,
        1, 9,
        0, 6,
        2, 3
    ]    

    flag = coords_to_flag(buf_b)  # map coordinates back to flag.
    print(f'[+] Trying flag: {flag}')

    if verify_flag(flag, check=True):
        print(f'[+] FLAG FOUND: {flag}')

    print('[+] Program finished! Bye bye :)')


# ----------------------------------------------------------------------------------------
"""
[+] Minipokemon Crack Started.
[+] Target Map:
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | x |   | x |   | . |   |   |   |   |   |
1 |   |   |   |   |   |   |   |   |   |   |
2 |   |   |   |   |   |   | x |   |   |   |
3 | . |   |   | . | . |   |   |   |   |   |
4 |   |   | . |   |   |   |   | . | . |   |
5 |   |   |   | . |   | . | . |   |   |   |
6 |   |   | x |   |   |   |   | x |   |   |
7 |   | x |   |   |   |   |   |   | x |   |
8 |   |   |   | . | . |   |   |   |   |   |
9 |   |   |   | . |   |   | . |   |   |   |
  +---------------------------------------+
[+] Visualizing target coordinates:
[+] Converting: 1 4 0 0 2 2 3 6 4 2 5 6 6 2 8 1 3 0 9 5 8 3 7 6 9 9 8 7 6 8 7 9 2 8 5 7 1 9 0 6 2 3
[+] buf_a (inverted): 1 4 0 0 2 2 3 6 4 2 5 6 6 2 8 1 3 0 9 5 8 3 7 6 9 9 8 7 6 8 7 9 2 8 5 7 1 9 0 6 2 3
[+] buf_a (XORed): 15 02 19 05 62 57 04 04 45 33 56 45 05 20 17 17 55 19 48 56 37 28 28 63
[+] Flag: PCTF{5EEth4tFURR3Tw4lcc}
[+] Trying flag: PCTF{5EEth4tFURR3Tw4lcc}
[+] Verifying Flag: PCTF{5EEth4tFURR3Tw4lcc}
[+] Init  buf_a: 0F 02 13 05 3E 39 04 04 2D 21 38 2D 05 14 11 11 37 13 30 38 25 1C 1C 3F
[+] XORed buf_a: 00 59 57 12 11 03 04 63 30 43 25 46 63 46 00 29 11 47 61 04 40 28 21 09
[+] DIVed buf_a: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[+] Init  buf_b: 1 4 0 0 2 2 3 6 4 2 5 6 6 2 8 1 3 0 9 5 8 3 7 6 9 9 8 7 6 8 7 9 2 8 5 7 1 9 0 6 2 3 1 4 0 0
[+] Iter #1. Connecting points: (0,0) ~> (2,2)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 |   |   |   |   |   |   |   |
2 |   |   |   |   |   |   |   |   |   |   |
3 |   |   |   |   |   |   |   |   |   |   |
4 |   |   |   |   |   |   |   |   |   |   |
5 |   |   |   |   |   |   |   |   |   |   |
6 |   |   |   |   |   |   |   |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #2. Connecting points: (2,2) ~> (3,6)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 |   |   |   |   |   |   |   |
2 |   |   | 2 | 3 |   |   |   |   |   |   |
3 |   |   |   | 6 |   |   |   |   |   |   |
4 |   |   |   | 6 |   |   |   |   |   |   |
5 |   |   |   | 6 |   |   |   |   |   |   |
6 |   |   |   |   |   |   |   |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #3. Connecting points: (3,6) ~> (4,2)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 |   |   |   |   |   |   |   |
2 |   |   | 2 | 3 |   |   |   |   |   |   |
3 |   |   |   | 6 | 6 |   |   |   |   |   |
4 |   |   |   | 6 | 6 |   |   |   |   |   |
5 |   |   |   | 6 | 6 |   |   |   |   |   |
6 |   |   |   | 2 | 4 |   |   |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #4. Connecting points: (4,2) ~> (5,6)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 |   |   |   |   |   |   |   |
2 |   |   | 2 | 3 | 1 | 3 |   |   |   |   |
3 |   |   |   | 6 | 6 | 6 |   |   |   |   |
4 |   |   |   | 6 | 6 | 6 |   |   |   |   |
5 |   |   |   | 6 | 6 | 6 |   |   |   |   |
6 |   |   |   | 2 | 4 |   |   |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #5. Connecting points: (5,6) ~> (6,2)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 |   |   |   |   |   |   |   |
2 |   |   | 2 | 3 | 1 | 3 |   |   |   |   |
3 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
4 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
5 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
6 |   |   |   | 2 | 4 | 2 | 4 |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #6. Connecting points: (6,2) ~> (8,1)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 |   |   |   |   |   |   |   |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 |   |
3 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
4 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
5 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
6 |   |   |   | 2 | 4 | 2 | 4 |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #7. Connecting points: (8,1) ~> (3,0)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 |   |   |   |   |   |   |   |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 |   |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 |   |
3 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
4 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
5 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
6 |   |   |   | 2 | 4 | 2 | 4 |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #8. Connecting points: (3,0) ~> (9,5)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 |   |   | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 |   |   | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 |   |   |   |
6 |   |   |   | 2 | 4 | 2 | 4 |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #9. Connecting points: (9,5) ~> (8,3)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 |   |   | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 |   | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 |   | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #10. Connecting points: (8,3) ~> (7,6)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 |   |   |   |
7 |   |   |   |   |   |   |   |   |   |   |
8 |   |   |   |   |   |   |   |   |   |   |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #11. Connecting points: (7,6) ~> (9,9)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   |   |   |   |   |   |   |   |   | 6 |
8 |   |   |   |   |   |   |   |   |   | 6 |
9 |   |   |   |   |   |   |   |   |   |   |
  +---------------------------------------+
[+] Iter #12. Connecting points: (9,9) ~> (8,7)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   |   |   |   |   |   |   |   |   | 6 |
8 |   |   |   |   |   |   |   |   | 6 | 6 |
9 |   |   |   |   |   |   |   |   | 2 | 4 |
  +---------------------------------------+
[+] Iter #13. Connecting points: (8,7) ~> (6,8)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   |   |   |   |   |   | 1 | 5 | 4 | 6 |
8 |   |   |   |   |   |   |   |   | 6 | 6 |
9 |   |   |   |   |   |   |   |   | 2 | 4 |
  +---------------------------------------+
[+] Iter #14. Connecting points: (6,8) ~> (7,9)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   |   |   |   |   |   | 1 | 5 | 4 | 6 |
8 |   |   |   |   |   |   | 2 | 3 | 6 | 6 |
9 |   |   |   |   |   |   |   |   | 2 | 4 |
  +---------------------------------------+
[+] Iter #15. Connecting points: (7,9) ~> (2,8)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   |   |   |   |   |   | 1 | 5 | 4 | 6 |
8 |   |   |   |   |   |   | 2 | 3 | 6 | 6 |
9 |   |   | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] Iter #16. Connecting points: (2,8) ~> (5,7)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   |   |   |   |   |   | 1 | 5 | 4 | 6 |
8 |   |   | 1 | 5 | 5 | 4 | 2 | 3 | 6 | 6 |
9 |   |   | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] Iter #17. Connecting points: (5,7) ~> (1,9)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 |   | 1 | 5 | 5 | 5 | 4 | 1 | 5 | 4 | 6 |
8 |   | 6 | 1 | 5 | 5 | 4 | 2 | 3 | 6 | 6 |
9 |   |   | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] Iter #18. Connecting points: (1,9) ~> (0,6)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   |   | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 |   |   |   | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 | 6 | 1 | 5 | 5 | 5 | 4 | 1 | 5 | 4 | 6 |
8 | 6 | 6 | 1 | 5 | 5 | 4 | 2 | 3 | 6 | 6 |
9 | 2 | 4 | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] Iter #19. Connecting points: (0,6) ~> (2,3)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   |   |   | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 | 1 | 5 | 4 | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 | 6 | 1 | 5 | 5 | 5 | 4 | 1 | 5 | 4 | 6 |
8 | 6 | 6 | 1 | 5 | 5 | 4 | 2 | 3 | 6 | 6 |
9 | 2 | 4 | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] Iter #20. Connecting points: (2,3) ~> (1,4)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 |   |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 |   |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 |   | 1 | 3 | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 | 1 | 5 | 4 | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 | 6 | 1 | 5 | 5 | 5 | 4 | 1 | 5 | 4 | 6 |
8 | 6 | 6 | 1 | 5 | 5 | 4 | 2 | 3 | 6 | 6 |
9 | 2 | 4 | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] Iter #21. Connecting points: (1,4) ~> (0,0)
    0   1   2   3   4   5   6   7   8   9
  +---------------------------------------+
0 | 1 | 5 | 3 | 1 | 5 | 5 | 5 | 5 | 5 | 3 |
1 | 6 |   | 6 | 2 | 5 | 5 | 5 | 5 | 4 | 6 |
2 | 6 |   | 2 | 3 | 1 | 3 | 1 | 5 | 4 | 6 |
3 | 6 | 1 | 3 | 6 | 6 | 6 | 6 | 1 | 3 | 6 |
4 | 2 | 4 | 6 | 6 | 6 | 6 | 6 | 6 | 6 | 6 |
5 |   |   | 6 | 6 | 6 | 6 | 6 | 6 | 2 | 3 |
6 | 1 | 5 | 4 | 2 | 4 | 2 | 4 | 2 | 5 | 3 |
7 | 6 | 1 | 5 | 5 | 5 | 4 | 1 | 5 | 4 | 6 |
8 | 6 | 6 | 1 | 5 | 5 | 4 | 2 | 3 | 6 | 6 |
9 | 2 | 4 | 2 | 5 | 5 | 5 | 5 | 4 | 2 | 4 |
  +---------------------------------------+
[+] FLAG FOUND: PCTF{5EEth4tFURR3Tw4lcc}
[+] Program finished! Bye bye :)
"""
# ----------------------------------------------------------------------------------------
