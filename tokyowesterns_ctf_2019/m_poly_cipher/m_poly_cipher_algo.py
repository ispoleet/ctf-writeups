#!/usr/bin/env python2
# --------------------------------------------------------------------------------------------------
# Tokyo Westerns CTF 2019 - M Poly Cipher (RE 279pt)
# --------------------------------------------------------------------------------------------------
import struct
import sys


# Public Key A: 0x7FFFFFFFD3A0
A = [
  0x466E5873, 0x738A6CC3, 0xBF3374DE, 0xDA6DE6FB, 0xFF96A1C8, 0xF860E573, 0x21A745BA, 0x030CBED8,
  0x9E931602, 0xA5BE0CC6, 0xD1689F87, 0x7542016A, 0x7B020175, 0xD4994AB2, 0xBA4B99E2, 0x65322AFB,
  0xCF9C0285, 0x7AC91C3C, 0x13BA3606, 0x6A601E54, 0xDF215320, 0xC940A009, 0x31BA70EB, 0x78AE20A5,
  0xC30B5257, 0x42E616E9, 0x7A46DB7C, 0x65BE8B5B, 0x751257A6, 0x4685E36C, 0x20EE6ABD, 0xF1F5A798,

  # A_i
  0x4248ABFC, 0xB326F28D, 0xAE555625, 0x0A1CC5DE, 0xD5680F09, 0x899EDD20, 0x3226FC5E, 0x3216FE03,
  0x99E7D5F7, 0xAF2938EC, 0x9E16D97A, 0x9FBC03E7, 0xB65583D8, 0x2B29ACC2, 0x02E77B98, 0x1A71D54B,
  0xB9289BE6, 0x1BC5E050, 0xC4CC7FA9, 0xAF9EE679, 0x8A00BC07, 0xF451D70A, 0x7CAD99D7, 0x376E028B,
  0x3D435AD0, 0x1E2F7E96, 0x8CF6C9FE, 0x66AA0D6F, 0x2A07F20F, 0xD5938B81, 0x7B3361CC, 0x13321E94
]

# Public Key B: 0x7FFFFFFFD4A0
B = [ 
  0x3D34C3AC, 0x9AA963C7, 0xF2CD30CA, 0x944AE027, 0x1C858041, 0x869E9AC2, 0x77403C89, 0xDD9A8B7B,
  0xD87EAF68, 0xE634F00E, 0xFDC210E0, 0xB1184F1E, 0xACD8A27E, 0xABD65A8A, 0x8ED09EED, 0x35C12F03,
  0x226A0E43, 0x119AEEA7, 0x74F64DA6, 0x51C426AB, 0x3E503AF8, 0x6E534A55, 0xACE4C8B5, 0x16B7E80C,
  0xBE56F7D3, 0x58DD12FC, 0xDD03F5F1, 0x3A516C1C, 0x35FD2F87, 0x36A1536F, 0x4CC4516C, 0x589A0733,

  # B_i
  0xD87A267C, 0x305C7677, 0x11B0A68C, 0x5D1A1D5F, 0xCB207795, 0xA5775961, 0x7762EFC2, 0x87E6A98C,
  0xF5C9F411, 0xDFE1B3FC, 0x71BCC30A, 0xB4CACED9, 0x969BF2DC, 0xBCD920A2, 0x2E90C5B3, 0x3FE58BD1,
  0x5A5484B8, 0xF6EE8EA9, 0x67E36F77, 0xB1A02F39, 0x914B3810, 0x523BFD17, 0x36DF2247, 0x056A5ECF,
  0x69819864, 0x45DB3D15, 0x446BE15C, 0x21BA346D, 0xFE598FF2, 0xA09EF3BE, 0x39FE7D36, 0x62F2C869
]

# Private Key X: 0x7FFFFFFFD6A0
X = [
  0xDF2243A0, 0xD10C9396, 0x249E2E1B, 0x138EC85F, 0x7DDF621C, 0xF654F036, 0xC2BC840A, 0xD682CBE5,
  0xE0045B46, 0xCCF5E9EE, 0x1B5B6878, 0xCB79B9D9, 0xBBBC16A3, 0x272F6082, 0xA0DC8C4C, 0x1FD43E4F,
  0x92E35E85, 0x486CCCDF, 0x9D12BA36, 0x7E0361BA, 0xCD1EE522, 0x1DF2733E, 0x4728B9C5, 0x345FC712,
  0xCED4DE5F, 0xEA3E2192, 0xE8BBE1BF, 0x93B9C980, 0x23ABBC9F, 0x86CDE4EC, 0x4E53320D, 0x02ECAE08,
  0x27E9130F, 0x36E6209E, 0xBA7702E6, 0x70017548, 0xD7674A9F, 0xEA68CEBB, 0xE3BC01FB, 0x5741B36D,
  0xAA1BCC27, 0x6DDE23FE, 0xE31AABFB, 0xE29E33BE, 0x5F78BA02, 0x6D049E60, 0xDF2D5D2E, 0xB6A0DE7B,
  0xC8DA2AF7, 0x8CBA8DF3, 0x3FAFEAF2, 0xE970800C, 0xB7F6F950, 0xAAB93219, 0x956E617A, 0x3A0F0036,
  0x0E566B03, 0x03F903FC, 0x0FAB842D, 0x368D5F6D, 0xD55C3073, 0x987DF0F0, 0xC9895A74, 0x9A86426E
]

# Substituted Private Key sub-X: 0x7FFFFFFFCF30
subX = [
  0xD682CBE5, 0x00000000, 0x1FD43E4F, 0x00000000, 0x345FC712, 0x00000000, 0x02ECAE08, 0x00000000,
  0x5741B36D, 0x00000000, 0xB6A0DE7B, 0x00000000, 0xC9895A74, 0x00000000, 0x956E617A, 0x00000000,
  0x3A0F0036, 0x00000000, 0xDF2D5D2E, 0x00000000, 0xE3BC01FB, 0x00000000, 0x9A86426E, 0x00000000,
  0x4E53320D, 0x00000000, 0x4728B9C5, 0x00000000, 0xA0DC8C4C, 0x00000000, 0xC2BC840A, 0x00000000,
  0x987DF0F0, 0x00000000, 0xAAB93219, 0x00000000, 0x6D049E60, 0x00000000, 0xEA68CEBB, 0x00000000,
  0x86CDE4EC, 0x00000000, 0x1DF2733E, 0x00000000, 0x272F6082, 0x00000000, 0xF654F036, 0x00000000,
  0xD55C3073, 0x00000000, 0xB7F6F950, 0x00000000, 0x5F78BA02, 0x00000000, 0xD7674A9F, 0x00000000,
  0x23ABBC9F, 0x00000000, 0xCD1EE522, 0x00000000, 0xBBBC16A3, 0x00000000, 0x7DDF621C, 0x00000000,
  0x368D5F6D, 0x00000000, 0xE970800C, 0x00000000, 0xE29E33BE, 0x00000000, 0x70017548, 0x00000000,
  0x93B9C980, 0x00000000, 0x7E0361BA, 0x00000000, 0xCB79B9D9, 0x00000000, 0x138EC85F, 0x00000000,
  0x0FAB842D, 0x00000000, 0x3FAFEAF2, 0x00000000, 0xE31AABFB, 0x00000000, 0xBA7702E6, 0x00000000,
  0xE8BBE1BF, 0x00000000, 0x9D12BA36, 0x00000000, 0x1B5B6878, 0x00000000, 0x249E2E1B, 0x00000000,
  0x03F903FC, 0x00000000, 0x8CBA8DF3, 0x00000000, 0x6DDE23FE, 0x00000000, 0x36E6209E, 0x00000000,
  0xEA3E2192, 0x00000000, 0x486CCCDF, 0x00000000, 0xCCF5E9EE, 0x00000000, 0xD10C9396, 0x00000000,
  0x0E566B03, 0x00000000, 0xC8DA2AF7, 0x00000000, 0xAA1BCC27, 0x00000000, 0x27E9130F, 0x00000000,
  0xCED4DE5F, 0x00000000, 0x92E35E85, 0x00000000, 0xE0045B46, 0x00000000, 0xDF2243A0, 0x00000000,
]

# Substituted Key sub-D: 0x7FFFFFFFD140
subD = [
  0x3A0B7DBC, 0x00000000, 0xA6269A2D, 0x00000000, 0xCE84D842, 0x00000000, 0xF7E2FECB, 0x00000000,
  0xF8529786, 0x00000000, 0x4CE28BCA, 0x00000000, 0x66EC685A, 0x00000000, 0xCB84CF66, 0x00000000,
  0xDD88DBA6, 0x00000000, 0xC5C346EB, 0x00000000, 0xA6AEE656, 0x00000000, 0x161F0E53, 0x00000000,
  0xCBBEEFD5, 0x00000000, 0x263EAB1D, 0x00000000, 0x6B541DA9, 0x00000000, 0x51C88DDF, 0x00000000,
  0x97E13C18, 0x00000000, 0xA4F48E99, 0x00000000, 0x1C5CA253, 0x00000000, 0x07ABE34A, 0x00000000,
  0x531DDAB6, 0x00000000, 0x49177639, 0x00000000, 0xE1486786, 0x00000000, 0x2C036DF9, 0x00000000,
  0x895A6B22, 0x00000000, 0x586418D4, 0x00000000, 0x32B60A9B, 0x00000000, 0xF7F317B9, 0x00000000,
  0x306EC103, 0x00000000, 0xB2DD7CEF, 0x00000000, 0xFEE0D8C5, 0x00000000, 0xB8914E00, 0x00000000,
  0x0E64DD7B, 0x00000000, 0x4ED90337, 0x00000000, 0x8E17AE0C, 0x00000000, 0xFC0D94A0, 0x00000000,
  0x5DAF939D, 0x00000000, 0xBF2F6E8D, 0x00000000, 0x25FC6610, 0x00000000, 0xEFF74AA8, 0x00000000,
  0xE3E7919D, 0x00000000, 0xE23C4348, 0x00000000, 0x4EC808F2, 0x00000000, 0xF61601E3, 0x00000000,
  0xA223D4B0, 0x00000000, 0x9D8684FD, 0x00000000, 0x19215043, 0x00000000, 0x9E74A18C, 0x00000000,
  0x586823BE, 0x00000000, 0x60E6EFCC, 0x00000000, 0x8B8C5A9F, 0x00000000, 0x6C21E049, 0x00000000,
  0xAAB81A21, 0x00000000, 0x9F9D48CF, 0x00000000, 0x9C5EFA42, 0x00000000, 0x95DABF87, 0x00000000,
  0x99842D5D, 0x00000000, 0xA8DEE40D, 0x00000000, 0xF97779C6, 0x00000000, 0xCB031F68, 0x00000000,
  0x125165F7, 0x00000000, 0xF07B4C1A, 0x00000000, 0xA9CEF9F9, 0x00000000, 0xE56DC736, 0x00000000
]

# Encryption key K: 0x7FFFFFFFDAA0 (old E)
K = [
  0x96F9FE43, 0x8435852E, 0x4D049055, 0xB9698698, 0x43CCE658, 0xDFD9F037, 0x86720402, 0xB694F5C1,
  0x1953E2A1, 0x27FBEC27, 0x847AD9FF, 0x3A4D35BD, 0x293DC239, 0x4E169F51, 0xF96C775B, 0xBC3660A1,
  0x600A3D91, 0xFB7964C8, 0xF462CFBB, 0x18DE4562, 0xF560E9B0, 0x801276AC, 0xF5F0C967, 0x1C92D353,
  0x0674279E, 0xB8DEBC22, 0x3E5B507C, 0x919459F7, 0x9124A116, 0x5299A040, 0x70CC029B, 0xD09E5D11,
  0xDFF94C07, 0x3049BA1B, 0x453230E2, 0xD1DFEBD5, 0x838F7C43, 0x635C78A6, 0x197C8CEA, 0x340E1618,
  0xB0F57057, 0x0A189313, 0xD0043E29, 0x9FA10951, 0xE532B929, 0xF2F32C6C, 0x65DC9F55, 0xFFA42B0C,
  0x6461B6F6, 0xBB932AA9, 0xCBA48C82, 0xC324C9A2, 0x9A42058D, 0x8025F7F2, 0x2AE1C0EF, 0xDC3F97C1,
  0x84C22121, 0x8E1C873E, 0x10E190AC, 0xA5395B7F, 0x42FDF760, 0xEF809AEF, 0xE691302B, 0xE1C89191
]

subA = [
  0x7A46DB7C, 0x00000000, 0x13BA3606, 0x00000000, 0xD1689F87, 0x00000000, 0xBF3374DE, 0x00000000,
  0x1E2F7E96, 0x00000000, 0x1BC5E050, 0x00000000, 0xAF2938EC, 0x00000000, 0xB326F28D, 0x00000000,
  0xAE555625, 0x00000000, 0x42E616E9, 0x00000000, 0x7AC91C3C, 0x00000000, 0xA5BE0CC6, 0x00000000,
  0x738A6CC3, 0x00000000, 0x3D435AD0, 0x00000000, 0xB9289BE6, 0x00000000, 0x99E7D5F7, 0x00000000,
  0x4248ABFC, 0x00000000, 0xC30B5257, 0x00000000, 0xCF9C0285, 0x00000000, 0x9E931602, 0x00000000,
  0x466E5873, 0x00000000, 0x030CBED8, 0x00000000, 0x65322AFB, 0x00000000, 0x78AE20A5, 0x00000000,
  0xF1F5A798, 0x00000000, 0x3216FE03, 0x00000000, 0x1A71D54B, 0x00000000, 0x376E028B, 0x00000000,
  0x13321E94, 0x00000000, 0x9E16D97A, 0x00000000, 0xC4CC7FA9, 0x00000000, 0x8CF6C9FE, 0x00000000,
  0xDA6DE6FB, 0x00000000, 0x7542016A, 0x00000000, 0x6A601E54, 0x00000000, 0x65BE8B5B, 0x00000000,
  0x0A1CC5DE, 0x00000000, 0x9FBC03E7, 0x00000000, 0xAF9EE679, 0x00000000, 0x66AA0D6F, 0x00000000,
  0xFF96A1C8, 0x00000000, 0x7B020175, 0x00000000, 0xDF215320, 0x00000000, 0x751257A6, 0x00000000,
  0xD5680F09, 0x00000000, 0xB65583D8, 0x00000000, 0x8A00BC07, 0x00000000, 0x2A07F20F, 0x00000000,
  0xF860E573, 0x00000000, 0xD4994AB2, 0x00000000, 0xC940A009, 0x00000000, 0x4685E36C, 0x00000000,
  0x899EDD20, 0x00000000, 0x2B29ACC2, 0x00000000, 0xF451D70A, 0x00000000, 0xD5938B81, 0x00000000,
  0x21A745BA, 0x00000000, 0xBA4B99E2, 0x00000000, 0x31BA70EB, 0x00000000, 0x20EE6ABD, 0x00000000,
  0x3226FC5E, 0x00000000, 0x02E77B98, 0x00000000, 0x7CAD99D7, 0x00000000, 0x7B3361CC, 0x00000000,
]

subB = [
  0x39FE7D36, 0x00000000, 0x36DF2247, 0x00000000, 0x2E90C5B3, 0x00000000, 0x7762EFC2, 0x00000000,
  0x4CC4516C, 0x00000000, 0xACE4C8B5, 0x00000000, 0x8ED09EED, 0x00000000, 0x77403C89, 0x00000000,
  0xA09EF3BE, 0x00000000, 0x523BFD17, 0x00000000, 0xBCD920A2, 0x00000000, 0xA5775961, 0x00000000,
  0x36A1536F, 0x00000000, 0x6E534A55, 0x00000000, 0xABD65A8A, 0x00000000, 0x869E9AC2, 0x00000000,
  0xFE598FF2, 0x00000000, 0x914B3810, 0x00000000, 0x969BF2DC, 0x00000000, 0xCB207795, 0x00000000,
  0x35FD2F87, 0x00000000, 0x3E503AF8, 0x00000000, 0xACD8A27E, 0x00000000, 0x1C858041, 0x00000000,
  0x21BA346D, 0x00000000, 0xB1A02F39, 0x00000000, 0xB4CACED9, 0x00000000, 0x5D1A1D5F, 0x00000000,
  0x3A516C1C, 0x00000000, 0x51C426AB, 0x00000000, 0xB1184F1E, 0x00000000, 0x944AE027, 0x00000000,
  0x446BE15C, 0x00000000, 0x67E36F77, 0x00000000, 0x71BCC30A, 0x00000000, 0x11B0A68C, 0x00000000,
  0xDD03F5F1, 0x00000000, 0x74F64DA6, 0x00000000, 0xFDC210E0, 0x00000000, 0xF2CD30CA, 0x00000000,
  0x45DB3D15, 0x00000000, 0xF6EE8EA9, 0x00000000, 0xDFE1B3FC, 0x00000000, 0x305C7677, 0x00000000,
  0x58DD12FC, 0x00000000, 0x119AEEA7, 0x00000000, 0xE634F00E, 0x00000000, 0x9AA963C7, 0x00000000,
  0x69819864, 0x00000000, 0x5A5484B8, 0x00000000, 0xF5C9F411, 0x00000000, 0xD87A267C, 0x00000000,
  0xBE56F7D3, 0x00000000, 0x226A0E43, 0x00000000, 0xD87EAF68, 0x00000000, 0x3D34C3AC, 0x00000000,
  0xDD9A8B7B, 0x00000000, 0x35C12F03, 0x00000000, 0x16B7E80C, 0x00000000, 0x589A0733, 0x00000000,
  0x87E6A98C, 0x00000000, 0x3FE58BD1, 0x00000000, 0x056A5ECF, 0x00000000, 0x62F2C869, 0x00000000
]

subC = [
  0x9C2D6F1B, 0x00000000, 0x0250D8E1, 0x00000000, 0x61241BB0, 0x00000000, 0x591758EA, 0x00000000,
  0xE5DD6797, 0x00000000, 0x6C522B16, 0x00000000, 0x2266A88A, 0x00000000, 0x94F2A05B, 0x00000000,
  0x74C827DF, 0x00000000, 0x7857A46B, 0x00000000, 0x335BB645, 0x00000000, 0x5294D382, 0x00000000,
  0x33BB1374, 0x00000000, 0x4EE7FAE7, 0x00000000, 0x346E0948, 0x00000000, 0x4673C5A2, 0x00000000,
  0xC9FB3149, 0x00000000, 0x8EC398B3, 0x00000000, 0x366548FC, 0x00000000, 0x44505E55, 0x00000000,
  0x68F37ACF, 0x00000000, 0x7A99480C, 0x00000000, 0x3D21660C, 0x00000000, 0x2C7DD958, 0x00000000,
  0x56F8C59B, 0x00000000, 0xC3A4E6DA, 0x00000000, 0x4C29D3C7, 0x00000000, 0xA51CBBF2, 0x00000000,
  0x84756E6D, 0x00000000, 0x1F81C902, 0x00000000, 0xD7005358, 0x00000000, 0x9541CE34, 0x00000000,
  0xF67AB5BC, 0x00000000, 0x4076238F, 0x00000000, 0x196E36DC, 0x00000000, 0x93A61E4C, 0x00000000,
  0xB362E2DE, 0x00000000, 0xFB333E65, 0x00000000, 0x686502FA, 0x00000000, 0xD8C0417D, 0x00000000,
  0x70A63EFB, 0x00000000, 0xCF5ACDB3, 0x00000000, 0x0BC478A2, 0x00000000, 0xC5F5142D, 0x00000000,
  0xF40452AA, 0x00000000, 0xF10700B8, 0x00000000, 0x108A1842, 0x00000000, 0x069D49D2, 0x00000000,
  0x310CBA17, 0x00000000, 0xA2EB0A78, 0x00000000, 0xB1B8CFA6, 0x00000000, 0xA015184E, 0x00000000,
  0xAFB3067D, 0x00000000, 0xC0586891, 0x00000000, 0xE56B61BE, 0x00000000, 0x29637BB2, 0x00000000,
  0x3488BAE4, 0x00000000, 0x46D312AB, 0x00000000, 0xEDF4A315, 0x00000000, 0xE3D28543, 0x00000000,
  0xDAEDDB20, 0x00000000, 0x851E6634, 0x00000000, 0x17CD4BD2, 0x00000000, 0xB7231D10, 0x00000000
]

subX2 = [
  0x3A0B7DBC, 0x00000000, 0xA6269A2D, 0x00000000, 0xCE84D842, 0x00000000, 0xF7E2FECB, 0x00000000,
  0xF8529786, 0x00000000, 0x4CE28BCA, 0x00000000, 0x66EC685A, 0x00000000, 0xCB84CF66, 0x00000000,
  0xE56DC736, 0x00000000, 0xA9CEF9F9, 0x00000000, 0xF07B4C1A, 0x00000000, 0x125165F7, 0x00000000,
  0xCB031F68, 0x00000000, 0xF97779C6, 0x00000000, 0xA8DEE40D, 0x00000000, 0x99842D5D, 0x00000000,
  0x95DABF87, 0x00000000, 0x9C5EFA42, 0x00000000, 0x9F9D48CF, 0x00000000, 0xAAB81A21, 0x00000000,
  0x6C21E049, 0x00000000, 0x8B8C5A9F, 0x00000000, 0x60E6EFCC, 0x00000000, 0x586823BE, 0x00000000,
  0x9E74A18C, 0x00000000, 0x19215043, 0x00000000, 0x9D8684FD, 0x00000000, 0xA223D4B0, 0x00000000,
  0xF61601E3, 0x00000000, 0x4EC808F2, 0x00000000, 0xE23C4348, 0x00000000, 0xE3E7919D, 0x00000000,
  0xEFF74AA8, 0x00000000, 0x25FC6610, 0x00000000, 0xBF2F6E8D, 0x00000000, 0x5DAF939D, 0x00000000,
  0xFC0D94A0, 0x00000000, 0x8E17AE0C, 0x00000000, 0x4ED90337, 0x00000000, 0x0E64DD7B, 0x00000000,
  0xB8914E00, 0x00000000, 0xFEE0D8C5, 0x00000000, 0xB2DD7CEF, 0x00000000, 0x306EC103, 0x00000000,
  0xF7F317B9, 0x00000000, 0x32B60A9B, 0x00000000, 0x586418D4, 0x00000000, 0x895A6B22, 0x00000000,
  0x2C036DF9, 0x00000000, 0xE1486786, 0x00000000, 0x49177639, 0x00000000, 0x531DDAB6, 0x00000000,
  0x07ABE34A, 0x00000000, 0x1C5CA253, 0x00000000, 0xA4F48E99, 0x00000000, 0x97E13C18, 0x00000000,
  0x51C88DDF, 0x00000000, 0x6B541DA9, 0x00000000, 0x263EAB1D, 0x00000000, 0xCBBEEFD5, 0x00000000,
  0x161F0E53, 0x00000000, 0xA6AEE656, 0x00000000, 0xC5C346EB, 0x00000000, 0xDD88DBA6, 0x00000000
]


# --------------------------------------------------------------------------------------------------
# Finds the applied substitution box given the input and the output tables.
def find_sub_tbl(X, subX):
    print '[+] Calculating substitution:'

    sub_tbl = [[], [], [], [], [], [], [], []]    
    
    for i in xrange(len(X)):
        if i > 0 and i % 8 == 0: print

        sub = subX.index(X[i]) >> 1

        print '%02d --> %02d, ' % (i, sub),

        sub_tbl[i % 8].append(sub)

    print

    return sub_tbl


# --------------------------------------------------------------------------------------------------
# Generates the public and private keys.
def generate_key(store=False):
    print '[+] Generating a public key pair:'

    sub_tbl_X = find_sub_tbl(X, subX)

    print
    print '[+] Calculating Key D:'
    D = []

    for k in xrange(0, 0x40, 8):
        for j in xrange(8):
            S = 0
            for i in xrange(8):
                S = (X[k + i] * subX[sub_tbl_X[j][i] << 1] + S) % 0xfffffffb
                
            print '%08X' % S,

            D.append(S)

        print
    print

    # -------------------------------------------------------------------------
    print '[+] Finding the negative tables of A and A_i:'
    Aneg = []

    for i in xrange(len(A)):
        if i > 0 and i % 8 == 0: print

        S = (0xfffffffb - A[i]) % 0xfffffffb
        print '%08X' % S,

        Aneg.append(S)

    print '\n'

    # -------------------------------------------------------------------------
    print '[+] Finding the negative tables of B and B_i:'
    Bneg = []

    for i in xrange(len(B)):
        if i > 0 and i % 8 == 0: print

        S = (0xfffffffb - B[i]) % 0xfffffffb
        print '%08X' % S,

        Bneg.append(S)

    print '\n'
 
    # -------------------------------------------------------------------------
    sub_tbl_D = find_sub_tbl(D, subD)
    print
 
    print '[+] Calculating Key E:'
    E = []

    for k in xrange(0, 0x40, 8):
        for j in xrange(8):
            S = 0
            for i in xrange(8):
                S = (Aneg[k + i] * subD[sub_tbl_D[j][i] << 1] + S) % 0xfffffffb
                
            print '%08X' % S,

            E.append(S)

        print
    print


    # -------------------------------------------------------------------------
    print '[+] Calculating Key F:'
    F = []

    for k in xrange(0, 0x40, 8):
        for j in xrange(8):
            S = 0
            for i in xrange(8):
                S = (Bneg[k + i] * subX[sub_tbl_X[j][i] << 1] + S) % 0xfffffffb
                
            print '%08X' % S,

            F.append(S)

        print
    print

    # -------------------------------------------------------------------------
    print '[+] Calculating Public Key C:'
    C = []

    for i in xrange(len(E)):
        if i > 0 and i % 8 == 0: print

        S = (E[i] + F[i]) % 0xfffffffb
        print '%08X' % S,

        C.append(S)

    print '\n'


    # -------------------------------------------------------------------------
    if store:
        print '[+] Storing public and private keys ...'

        with open('mpoly.pub', 'wb') as fp:
            for a in A:
                fp.write(struct.pack("<L", a))

            for b in B:
                fp.write(struct.pack("<L", b))

            for c in C:
                fp.write(struct.pack("<L", c))

        with open('mpoly.priv', 'wb') as fp:
            for x in X:
                fp.write(struct.pack("<L", x))

    return A, B, C, X



# --------------------------------------------------------------------------------------------------
# Performs an encryption round
def round(A, B, subB, name='?'):
    sub_tbl_B = find_sub_tbl(B, subB)
    print

    print '[+] Calculating Key %s:' % name
    X = []

    for k in xrange(0, 0x40, 8):
        for j in xrange(8):
            S = 0
            for i in xrange(8):
                S = (A[k + i] * subB[sub_tbl_B[j][i] << 1] + S) % 0xfffffffb
                
            print '%08X' % S,

            X.append(S)
        print
    print        

    return X


# --------------------------------------------------------------------------------------------------
# Encrypts an arbitrary plaintext.
def encrypt_plaintext(A, B, C, plain):
    print "[+] Encrypting plaintext '%s'" % plain
    
    P = [ord(p) for p in plain] + [0]*(64 - len(plain))
    print '[+] Expanded plaintext:'
    print P
    print

    Q = round(K, A, subA, 'Q')
    R = round(K, B, subB, 'R')
    S = round(K, C, subC, 'S')

    print '[+] Calculating Ciphertext:'
    cipher = []

    for i in xrange(len(S)):
        if i > 0 and i % 8 == 0: print

        Sum = (S[i] + P[i]) % 0xfffffffb
        print '%08X' % Sum,

        cipher.append(Sum)

    print '\n'
  
    return Q, R, cipher

# --------------------------------------------------------------------------------------------------
# Decrypts an arbitrary ciphertext.
def decrypt_plaintext(X, Q, R, cipher):
    print '[+] Decrypting ciphertext ...'

    E = []

    X2 = round(X, X, subX, 'X^2')

    M = round(Q, X2, subX2, 'M')
    N = round(R, X, subX, 'N')
 
    print '[+] Calculating O:'
    O = []

    for i in xrange(len(N)):
        if i > 0 and i % 8 == 0: print

        S = (N[i] + M[i]) % 0xfffffffb
        print '%08X' % S,

        O.append(S)

    print '\n'
    
    print '[+] Calculating M:'
    M = []

    for i in xrange(len(N)):
        if i > 0 and i % 8 == 0: print

        S = (O[i] + cipher[i]) % 0xfffffffb
        print '%08X' % S,

        M.append(S)

    print '\n'

    print '[+] Recovering original plaintext ...'

    return ''.join(chr(m) for m in M)


# --------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    print '[+] M Poly Cipher algorithm started.'

    print '[+] ------------------------------------------------------------'
    A, B, C, X = generate_key(False)

    print '[+] ------------------------------------------------------------'
    Q, R, cipher = encrypt_plaintext(A, B, C, 'This is ispooooooooo')

    print '[+] ------------------------------------------------------------'
    plain = decrypt_plaintext(X, Q, R, cipher)

    print "[+] Decrypted Plaintext: '%s'" % plain


# --------------------------------------------------------------------------------------------------
'''
ispo@nogirl:~/ctf/tokyowesterns_ctf_2019$ ./m_poly_cipher_crack.py 
[+] M Poly Cipher algorithm started.
[+] ------------------------------------------------------------
[+] Generating a public key pair:
[+] Calculating substitution:
00 --> 63,  01 --> 55,  02 --> 47,  03 --> 39,  04 --> 31,  05 --> 23,  06 --> 15,  07 --> 00, 
\08 --> 62,  09 --> 54,  10 --> 46,  11 --> 38,  12 --> 30,  13 --> 22,  14 --> 14,  15 --> 01, 
16 --> 61,  17 --> 53,  18 --> 45,  19 --> 37,  20 --> 29,  21 --> 21,  22 --> 13,  23 --> 02, 
24 --> 60,  25 --> 52,  26 --> 44,  27 --> 36,  28 --> 28,  29 --> 20,  30 --> 12,  31 --> 03, 
32 --> 59,  33 --> 51,  34 --> 43,  35 --> 35,  36 --> 27,  37 --> 19,  38 --> 10,  39 --> 04, 
40 --> 58,  41 --> 50,  42 --> 42,  43 --> 34,  44 --> 26,  45 --> 18,  46 --> 09,  47 --> 05, 
48 --> 57,  49 --> 49,  50 --> 41,  51 --> 33,  52 --> 25,  53 --> 17,  54 --> 07,  55 --> 08, 
56 --> 56,  57 --> 48,  58 --> 40,  59 --> 32,  60 --> 24,  61 --> 16,  62 --> 06,  63 --> 11, 

[+] Calculating Key D:
E56DC736 95DABF87 9E74A18C EFF74AA8 B8914E00 2C036DF9 51C88DDF 3A0B7DBC
A9CEF9F9 9C5EFA42 19215043 25FC6610 FEE0D8C5 E1486786 6B541DA9 A6269A2D
F07B4C1A 9F9D48CF 9D8684FD BF2F6E8D B2DD7CEF 49177639 263EAB1D CE84D842
125165F7 AAB81A21 A223D4B0 5DAF939D 306EC103 531DDAB6 CBBEEFD5 F7E2FECB
CB031F68 6C21E049 F61601E3 FC0D94A0 F7F317B9 07ABE34A 161F0E53 F8529786
F97779C6 8B8C5A9F 4EC808F2 8E17AE0C 32B60A9B 1C5CA253 A6AEE656 4CE28BCA
A8DEE40D 60E6EFCC E23C4348 4ED90337 586418D4 A4F48E99 C5C346EB 66EC685A
99842D5D 586823BE E3E7919D 0E64DD7B 895A6B22 97E13C18 DD88DBA6 CB84CF66

[+] Finding the negative tables of A and A_i:
B991A788 8C759338 40CC8B1D 25921900 00695E33 079F1A88 DE58BA41 FCF34123
616CE9F9 5A41F335 2E976074 8ABDFE91 84FDFE86 2B66B549 45B46619 9ACDD500
3063FD76 8536E3BF EC45C9F5 959FE1A7 20DEACDB 36BF5FF2 CE458F10 8751DF56
3CF4ADA4 BD19E912 85B9247F 9A4174A0 8AEDA855 B97A1C8F DF11953E 0E0A5863
BDB753FF 4CD90D6E 51AAA9D6 F5E33A1D 2A97F0F2 766122DB CDD9039D CDE901F8
66182A04 50D6C70F 61E92681 6043FC14 49AA7C23 D4D65339 FD188463 E58E2AB0
46D76415 E43A1FAB 3B338052 50611982 75FF43F4 0BAE28F1 83526624 C891FD70
C2BCA52B E1D08165 730935FD 9955F28C D5F80DEC 2A6C747A 84CC9E2F ECCDE167

[+] Finding the negative tables of B and B_i:
C2CB3C4F 65569C34 0D32CF31 6BB51FD4 E37A7FBA 79616539 88BFC372 22657480
27815093 19CB0FED 023DEF1B 4EE7B0DD 53275D7D 5429A571 712F610E CA3ED0F8
DD95F1B8 EE651154 8B09B255 AE3BD950 C1AFC503 91ACB5A6 531B3746 E94817EF
41A90828 A722ECFF 22FC0A0A C5AE93DF CA02D074 C95EAC8C B33BAE8F A765F8C8
2785D97F CFA38984 EE4F596F A2E5E29C 34DF8866 5A88A69A 889D1039 7819566F
0A360BEA 201E4BFF 8E433CF1 4B353122 69640D1F 4326DF59 D16F3A48 C01A742A
A5AB7B43 09117152 981C9084 4E5FD0C2 6EB4C7EB ADC402E4 C920DDB4 FA95A12C
967E6797 BA24C2E6 BB941E9F DE45CB8E 01A67009 5F610C3D C60182C5 9D0D3792

[+] Calculating substitution:
00 --> 63,  01 --> 55,  02 --> 47,  03 --> 39,  04 --> 31,  05 --> 23,  06 --> 15,  07 --> 00, 
08 --> 62,  09 --> 54,  10 --> 46,  11 --> 38,  12 --> 30,  13 --> 22,  14 --> 14,  15 --> 01, 
16 --> 61,  17 --> 53,  18 --> 45,  19 --> 37,  20 --> 29,  21 --> 21,  22 --> 13,  23 --> 02, 
24 --> 60,  25 --> 52,  26 --> 44,  27 --> 36,  28 --> 28,  29 --> 20,  30 --> 12,  31 --> 03, 
32 --> 59,  33 --> 51,  34 --> 43,  35 --> 35,  36 --> 27,  37 --> 19,  38 --> 11,  39 --> 04, 
40 --> 58,  41 --> 50,  42 --> 42,  43 --> 34,  44 --> 26,  45 --> 18,  46 --> 10,  47 --> 05, 
48 --> 57,  49 --> 49,  50 --> 41,  51 --> 33,  52 --> 25,  53 --> 17,  54 --> 09,  55 --> 06, 
56 --> 56,  57 --> 48,  58 --> 40,  59 --> 32,  60 --> 24,  61 --> 16,  62 --> 08,  63 --> 07, 

[+] Calculating Key E:
034B84F2 2FC67DCB 02D0892E 7F2A4D63 7D023E7D 6F035A0F 234CE3D1 01B0A3B0
DD7503E4 A29508C2 BB412CD9 BB249673 3B596748 065F3B2A ED0F8208 26ED5277
87EDDBF7 FA379759 7594E152 4B1B4189 7B9AD2C2 3BA186A2 8FA57B64 2223C032
008491EE F0F00AFA 5BAE0490 2B8F774D 8F58E3B5 0733ED3D B7C12B3B 00FE2A6C
531B4874 9B334F5B F937B733 178BB1E4 CBE850B8 58E165B7 F7D64A3E 3D1ACC17
A4D243D0 292F836C 0C992791 4773C685 B587515A 8C5634ED 06280508 5E0C34ED
5FC8D653 142F977F EC6C1FE4 B71D197C 5EFCD196 3E270725 6A8C6C8F 773B03C5
2627B51D 16BA11B9 A4332551 2FA75C97 B9897AE3 38FF1603 A0EE1A46 0F0F3DD3

[+] Calculating Key F:
2617F6C0 D6D6CC02 D5EFB84F 161780D1 AF7B9AD6 D7706B8E 71A5BC8A 32D81734
07F65DDA 6DF50F7B AD23D61C 1BDBBCE5 01C7FEC4 2E0ECE1E 3557267D 1FE5C034
386A8C9A F6CF695A 859E5D13 D4668774 FEFE7545 13467445 DCACAFAD CBD0E2E3
AF2E748F 031447B0 57B4DE4E 58E5F720 D99A9715 2C872637 2E1C3C5C E2D45AD7
4CF9CFDA 2AC1C4D2 9A6E6714 8D910A0E 78680D98 F9B36DC6 61410EA7 9DD30F09
0CE68BD6 E294F531 0CD50F4B 04B60D42 80DDF79D A7058153 5AFC16A8 27123147
43223425 BB2B3634 540A03A6 0C87CD5E 2FC6C71D 3A309D46 97C46C4D A0924808
0AE504FA 59EC2D42 5247906B 27516904 1071B666 3BC911DC FB3F54D0 A813DF3D

[+] Calculating Public Key C:
29637BB2 069D49D2 D8C0417D 9541CE34 2C7DD958 4673C5A2 94F2A05B 3488BAE4
E56B61BE 108A1842 686502FA D7005358 3D21660C 346E0948 2266A88A 46D312AB
C0586891 F10700B8 FB333E65 1F81C902 7A99480C 4EE7FAE7 6C522B16 EDF4A315
AFB3067D F40452AA B362E2DE 84756E6D 68F37ACF 33BB1374 E5DD6797 E3D28543
A015184E C5F5142D 93A61E4C A51CBBF2 44505E55 5294D382 591758EA DAEDDB20
B1B8CFA6 0BC478A2 196E36DC 4C29D3C7 366548FC 335BB645 61241BB0 851E6634
A2EB0A78 CF5ACDB3 4076238F C3A4E6DA 8EC398B3 7857A46B 0250D8E1 17CD4BD2
310CBA17 70A63EFB F67AB5BC 56F8C59B C9FB3149 74C827DF 9C2D6F1B B7231D10

[+] ------------------------------------------------------------
[+] Encrypting plaintext 'This is ispooooooooo'
[+] Expanded plaintext:
[84, 104, 105, 115, 32, 105, 115, 32, 105, 115, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

[+] Calculating substitution:
00 --> 20,  01 --> 12,  02 --> 03,  03 --> 32,  04 --> 40,  05 --> 48,  06 --> 56,  07 --> 21, 
08 --> 19,  09 --> 11,  10 --> 02,  11 --> 33,  12 --> 41,  13 --> 49,  14 --> 57,  15 --> 22, 
16 --> 18,  17 --> 10,  18 --> 01,  19 --> 34,  20 --> 42,  21 --> 50,  22 --> 58,  23 --> 23, 
24 --> 17,  25 --> 09,  26 --> 00,  27 --> 35,  28 --> 43,  29 --> 51,  30 --> 59,  31 --> 24, 
32 --> 16,  33 --> 07,  34 --> 08,  35 --> 36,  36 --> 44,  37 --> 52,  38 --> 60,  39 --> 25, 
40 --> 15,  41 --> 06,  42 --> 29,  43 --> 37,  44 --> 45,  45 --> 53,  46 --> 61,  47 --> 26, 
48 --> 14,  49 --> 05,  50 --> 30,  51 --> 38,  52 --> 46,  53 --> 54,  54 --> 62,  55 --> 27, 
56 --> 13,  57 --> 04,  58 --> 31,  59 --> 39,  60 --> 47,  61 --> 55,  62 --> 63,  63 --> 28, 

[+] Calculating Key Q:
FCE16360 77E95321 431B934B 1711F847 A3D60228 BA135820 BBB02FFA E7B0B2A0
60798C67 94FD4AE9 92A70424 2397C6B8 5CFD687A 9C840335 7F2459A8 2C682A80
31BF5C75 8F50A3E1 3673C31B 38ADBDDC BD5ECF70 62F095EC 5982E9D5 D8A20AAD
54497A3E CBFF49CE 943AA22B F85FAFED FED3CA6D 9250809A 0012FA1F 18B0E385
82205D26 12B51380 DBC07906 3B84144F CFBA2009 348AAA47 30F290BC 29EA286A
3A39C577 B7885497 EC41C1CD 24DDA674 DF6BAE9C A3517879 0D526145 3BA0A522
DF12738E 776910DB 9FD9BFF4 36218286 2B99A680 141A1695 F639F374 2D24EEAD
9B2F5634 300384FF 0BC6D08E 401B6DEC A4152AAC 92715FC8 486771BB 13869F1D

[+] Calculating substitution:
00 --> 55,  01 --> 47,  02 --> 39,  03 --> 31,  04 --> 23,  05 --> 15,  06 --> 07,  07 --> 56, 
08 --> 54,  09 --> 46,  10 --> 38,  11 --> 30,  12 --> 22,  13 --> 14,  14 --> 06,  15 --> 57, 
16 --> 53,  17 --> 45,  18 --> 37,  19 --> 29,  20 --> 21,  21 --> 13,  22 --> 05,  23 --> 58, 
24 --> 52,  25 --> 44,  26 --> 36,  27 --> 28,  28 --> 20,  29 --> 12,  30 --> 04,  31 --> 59, 
32 --> 51,  33 --> 43,  34 --> 35,  35 --> 27,  36 --> 19,  37 --> 11,  38 --> 03,  39 --> 60, 
40 --> 50,  41 --> 42,  42 --> 34,  43 --> 26,  44 --> 18,  45 --> 10,  46 --> 02,  47 --> 61, 
48 --> 49,  49 --> 41,  50 --> 33,  51 --> 25,  52 --> 17,  53 --> 09,  54 --> 01,  55 --> 62, 
56 --> 48,  57 --> 40,  58 --> 32,  59 --> 24,  60 --> 16,  61 --> 08,  62 --> 00,  63 --> 63, 

[+] Calculating Key R:
10286242 BF2C33E9 D71C37CE 8A36D0BB 8793425D 7C6DF8D1 CC7C6E24 499B8657
B2875A14 B0C0D85E 21214604 83997A7C F5535960 7C31C57F 10FBDA30 74377A0B
29C88BD3 EFAD2A07 91883B1D ABFB536E D76D4A58 1953011F FDB09550 F35EFA12
C0523AD2 A858DE00 CE2DEF41 6AAE706E 39F54C6A 77B6AE27 9A2F7C3C 99535076
DC7C6CF5 6F7742EC E012ACA6 34C0DE05 CF49070D 26D49027 C732D496 12CF0E30
560412E9 8C8BD552 08FC4332 D757084A 38BEC80C 284D65D0 1B800309 88AE5410
239636EB 28AE8703 3F01A646 A22C4510 A58B2851 85B35BE3 3CD8271E 9F8592CB
B70728B8 2E8B7B50 43BEB6AE 04E6A831 A1461E69 7D896E3B 6993117B 6AF293EB

[+] Calculating substitution:
00 --> 55,  01 --> 47,  02 --> 39,  03 --> 31,  04 --> 23,  05 --> 15,  06 --> 07,  07 --> 56, 
08 --> 54,  09 --> 46,  10 --> 38,  11 --> 30,  12 --> 22,  13 --> 14,  14 --> 06,  15 --> 57, 
16 --> 53,  17 --> 45,  18 --> 37,  19 --> 29,  20 --> 21,  21 --> 13,  22 --> 05,  23 --> 58, 
24 --> 52,  25 --> 44,  26 --> 36,  27 --> 28,  28 --> 20,  29 --> 12,  30 --> 04,  31 --> 59, 
32 --> 51,  33 --> 43,  34 --> 35,  35 --> 27,  36 --> 19,  37 --> 11,  38 --> 03,  39 --> 60, 
40 --> 50,  41 --> 42,  42 --> 34,  43 --> 26,  44 --> 18,  45 --> 10,  46 --> 02,  47 --> 61, 
48 --> 49,  49 --> 41,  50 --> 33,  51 --> 25,  52 --> 17,  53 --> 09,  54 --> 01,  55 --> 62, 
56 --> 48,  57 --> 40,  58 --> 32,  59 --> 24,  60 --> 16,  61 --> 08,  62 --> 00,  63 --> 63, 

[+] Calculating Key S:
303D9E55 125C3451 5B6F61AA BE542785 764986CE 564EE5F8 C8F7344D 462F5DF7
8A9B8349 8677AD51 9FDBA022 37F7A60B 5D62F8B9 A800A821 84874EA3 F05E1283
FFE944EF 492755D2 91FAA693 2D34CBFE E91530AB BD6787D1 8438B862 0959C4B2
BDA56081 927450EB 62FB4C49 907E5B30 7F5E5B48 8D8AA195 851248C3 24950903
CA7CA06F 03372390 D0CAD159 56131434 A694ABF7 2998E7FF 7C7A2B79 B2256961
4692974F 3083C6B0 1D2E870C B812B764 C6214119 B7BDFE09 89E051D2 CD4CBD51
58DDE74F 582343F5 B1655BA9 4A6C2739 83B650D2 23F4B21D 9B359609 FB3127B7
02C31A66 6725230B 52F710E5 D907E903 530938F4 92FB85BD 94B9E886 7E702337

[+] Calculating Ciphertext:
303D9EA9 125C34B9 5B6F6213 BE5427F8 764986EE 564EE661 C8F734C0 462F5E17
8A9B83B2 8677ADC4 9FDBA092 37F7A67A 5D62F928 A800A890 84874F12 F05E12F2
FFE9455E 49275641 91FAA702 2D34CC6D E91530AB BD6787D1 8438B862 0959C4B2
BDA56081 927450EB 62FB4C49 907E5B30 7F5E5B48 8D8AA195 851248C3 24950903
CA7CA06F 03372390 D0CAD159 56131434 A694ABF7 2998E7FF 7C7A2B79 B2256961
4692974F 3083C6B0 1D2E870C B812B764 C6214119 B7BDFE09 89E051D2 CD4CBD51
58DDE74F 582343F5 B1655BA9 4A6C2739 83B650D2 23F4B21D 9B359609 FB3127B7
02C31A66 6725230B 52F710E5 D907E903 530938F4 92FB85BD 94B9E886 7E702337

[+] ------------------------------------------------------------
[+] Decrypting ciphertext ...
[+] Calculating substitution:
00 --> 63,  01 --> 55,  02 --> 47,  03 --> 39,  04 --> 31,  05 --> 23,  06 --> 15,  07 --> 00, 
08 --> 62,  09 --> 54,  10 --> 46,  11 --> 38,  12 --> 30,  13 --> 22,  14 --> 14,  15 --> 01, 
16 --> 61,  17 --> 53,  18 --> 45,  19 --> 37,  20 --> 29,  21 --> 21,  22 --> 13,  23 --> 02, 
24 --> 60,  25 --> 52,  26 --> 44,  27 --> 36,  28 --> 28,  29 --> 20,  30 --> 12,  31 --> 03, 
32 --> 59,  33 --> 51,  34 --> 43,  35 --> 35,  36 --> 27,  37 --> 19,  38 --> 10,  39 --> 04, 
40 --> 58,  41 --> 50,  42 --> 42,  43 --> 34,  44 --> 26,  45 --> 18,  46 --> 09,  47 --> 05, 
48 --> 57,  49 --> 49,  50 --> 41,  51 --> 33,  52 --> 25,  53 --> 17,  54 --> 07,  55 --> 08, 
56 --> 56,  57 --> 48,  58 --> 40,  59 --> 32,  60 --> 24,  61 --> 16,  62 --> 06,  63 --> 11, 

[+] Calculating Key X^2:
E56DC736 95DABF87 9E74A18C EFF74AA8 B8914E00 2C036DF9 51C88DDF 3A0B7DBC
A9CEF9F9 9C5EFA42 19215043 25FC6610 FEE0D8C5 E1486786 6B541DA9 A6269A2D
F07B4C1A 9F9D48CF 9D8684FD BF2F6E8D B2DD7CEF 49177639 263EAB1D CE84D842
125165F7 AAB81A21 A223D4B0 5DAF939D 306EC103 531DDAB6 CBBEEFD5 F7E2FECB
CB031F68 6C21E049 F61601E3 FC0D94A0 F7F317B9 07ABE34A 161F0E53 F8529786
F97779C6 8B8C5A9F 4EC808F2 8E17AE0C 32B60A9B 1C5CA253 A6AEE656 4CE28BCA
A8DEE40D 60E6EFCC E23C4348 4ED90337 586418D4 A4F48E99 C5C346EB 66EC685A
99842D5D 586823BE E3E7919D 0E64DD7B 895A6B22 97E13C18 DD88DBA6 CB84CF66

[+] Calculating substitution:
00 --> 08,  01 --> 16,  02 --> 24,  03 --> 32,  04 --> 40,  05 --> 48,  06 --> 56,  07 --> 00, 
08 --> 09,  09 --> 17,  10 --> 25,  11 --> 33,  12 --> 41,  13 --> 49,  14 --> 57,  15 --> 01, 
16 --> 10,  17 --> 18,  18 --> 26,  19 --> 34,  20 --> 42,  21 --> 50,  22 --> 58,  23 --> 02, 
24 --> 11,  25 --> 19,  26 --> 27,  27 --> 35,  28 --> 43,  29 --> 51,  30 --> 59,  31 --> 03, 
32 --> 12,  33 --> 20,  34 --> 28,  35 --> 36,  36 --> 44,  37 --> 52,  38 --> 60,  39 --> 04, 
40 --> 13,  41 --> 21,  42 --> 29,  43 --> 37,  44 --> 45,  45 --> 53,  46 --> 61,  47 --> 05, 
48 --> 14,  49 --> 22,  50 --> 30,  51 --> 38,  52 --> 46,  53 --> 54,  54 --> 62,  55 --> 06, 
56 --> 15,  57 --> 23,  58 --> 31,  59 --> 39,  60 --> 47,  61 --> 55,  62 --> 63,  63 --> 07, 

[+] Calculating Key M:
DD5E9B2C 205D27E7 8FF76D26 E3906E3C 5F2F0F28 68AB1816 D6221D73 A89BA3A1
EDAFA486 36A6A5B7 658D2370 FF1908DA A7FDFECA B773E6A2 35D1640A 8B5678D9
75E1D612 1E1CA334 250BAB20 3CF49C03 B5B668E7 0362884A E3DF52E0 0B6F21DB
E919BF09 47DCE532 D117F2E6 6DAA0CBF 5A670D31 6937636A B4ECCFE4 59310B3E
4E17082C 11177BE2 E2618419 F26BFB71 3B4F4025 BFC6D3C2 C5F924FB 1BD42F85
94FFD1FE 61ED956B E55624F8 F1D50B5E FDD711CE E0BF424A 4DB666E8 A8678501
20C8264D 874C59F7 65E56217 C5C845DB 36C98A71 B6E025E9 23FC3FEA 13EE12A3
448EDFC8 539DD637 7C17C8D1 8AB091BE A7C2133D FD810BA6 89DDFCF1 573F7BC3

[+] Calculating substitution:
00 --> 63,  01 --> 55,  02 --> 47,  03 --> 39,  04 --> 31,  05 --> 23,  06 --> 15,  07 --> 00, 
08 --> 62,  09 --> 54,  10 --> 46,  11 --> 38,  12 --> 30,  13 --> 22,  14 --> 14,  15 --> 01, 
16 --> 61,  17 --> 53,  18 --> 45,  19 --> 37,  20 --> 29,  21 --> 21,  22 --> 13,  23 --> 02, 
24 --> 60,  25 --> 52,  26 --> 44,  27 --> 36,  28 --> 28,  29 --> 20,  30 --> 12,  31 --> 03, 
32 --> 59,  33 --> 51,  34 --> 43,  35 --> 35,  36 --> 27,  37 --> 19,  38 --> 10,  39 --> 04, 
40 --> 58,  41 --> 50,  42 --> 42,  43 --> 34,  44 --> 26,  45 --> 18,  46 --> 09,  47 --> 05, 
48 --> 57,  49 --> 49,  50 --> 41,  51 --> 33,  52 --> 25,  53 --> 17,  54 --> 07,  55 --> 08, 
56 --> 56,  57 --> 48,  58 --> 40,  59 --> 32,  60 --> 24,  61 --> 16,  62 --> 06,  63 --> 11, 

[+] Calculating Key N:
F263C675 CD46A3C3 1499312B 5E1B6A35 2A876A05 410601ED 60E6AE36 1134FE63
87B4D827 42E1ACF3 FA973C64 C8EF5111 FA9F0873 A08B7133 45A74D4E 844B749A
8A34E4F5 98BC06F5 48F9AE48 95D697FA 61346664 3F35EFE0 97E7F4B4 EB37196E
5940E06C 25AEC9DE CBECC0C7 01D7980C 263A9782 093DFAFC C600E74F 8239EBBA
E76C575B EBB16089 4CD3AA84 B780F051 1E1C13DF 16A0443A BD8CAF82 32066715
246D96AE 6D8EA3E0 FD7B53F2 56183D34 3C07AD0F 6782BFA3 28694741 8A4BBDA4
8659F25F 2090620F E8B54236 EFCB92E2 458024B8 252B27F5 40CE2A08 F0E0C59C
B8AE05CD 453D06B9 30F12645 9C478535 0534B3CA 6F836E93 E1681A7F 2A506101

[+] Calculating O:
CFC261A6 EDA3CBAA A4909E51 41ABD876 89B6792D A9B11A03 3708CBAE B9D0A204
75647CB2 798852AA 60245FD9 C80859F0 A29D0742 57FF57DA 7B78B158 0FA1ED78
0016BB0C B6D8AA29 6E055968 D2CB33FD 16EACF50 4298782A 7BC74799 F6A63B49
425A9F7A 6D8BAF10 9D04B3B2 6F81A4CB 80A1A4B3 72755E66 7AEDB738 DB6AF6F8
35835F8C FCC8DC6B 2F352EA2 A9ECEBC7 596B5404 D66717FC 8385D482 4DDA969A
B96D68AC CF7C394B E2D178EF 47ED4897 39DEBEE2 484201F2 761FAE29 32B342AA
A72218AC A7DCBC06 4E9AA452 B593D8C2 7C49AF29 DC0B4DDE 64CA69F2 04CED844
FD3CE595 98DADCF0 AD08EF16 26F816F8 ACF6C707 6D047A3E 6B461775 818FDCC4

[+] Calculating M:
00000054 00000068 00000069 00000073 00000020 00000069 00000073 00000020
00000069 00000073 00000070 0000006F 0000006F 0000006F 0000006F 0000006F
0000006F 0000006F 0000006F 0000006F 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000

[+] Recovering original plaintext ...
[+] Decrypted Plaintext: 'This is ispooooooooo'
'''
# --------------------------------------------------------------------------------------------------
