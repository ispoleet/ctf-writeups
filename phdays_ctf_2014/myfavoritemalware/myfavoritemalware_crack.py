#!/usr/bin/env python2
# --------------------------------------------------------------------------------------------------
# PhDays quals 2014 - MyFavoriteMalware (RE 4000)
# --------------------------------------------------------------------------------------------------
import socket
import md5


# advres.dll that we want to decrypt
advres = [
    0x00, 0x12, 0xFF, 0xAA, 0x7F, 0x95, 0xBE, 0xF9, 0x5D, 0x49, 0xB9, 0x93, 0x34, 0x83, 0xA6, 0xE1,
    0x1B, 0x54, 0xB5, 0x7B, 0x77, 0x55, 0x8B, 0x64, 0xFF, 0x0E, 0xDA, 0xC7, 0x41, 0xA5, 0x27, 0x6D,
    0x81, 0xCD, 0x6E, 0x43, 0xE1, 0xA8, 0x3F, 0x08, 0xCD, 0x8F, 0x6F, 0x82, 0xA8, 0x59, 0x0C, 0x23,
    0x3A, 0x8A, 0x97, 0x66, 0x5E, 0x69, 0x68, 0x1F, 0x76, 0xA5, 0x42, 0x5E, 0xEE, 0xBB, 0xC8, 0x78,
    0x85, 0xE2, 0xC0, 0x14, 0x91, 0x45, 0x0F, 0xB8, 0xDB, 0x82, 0x40, 0xFB, 0xD3, 0xD2, 0x0E, 0xA5,
    0x45, 0xE8, 0xCA, 0x4F, 0x17, 0x35, 0x11, 0xFB, 0x89, 0x68, 0xEC, 0xD7, 0x13, 0x1C, 0xB6, 0x80,
    0xFC, 0xEA, 0xAC, 0x58, 0x60, 0xE3, 0x08, 0x08, 0xD7, 0x1D, 0x8B, 0xC6, 0x18, 0x83, 0xE2, 0xC5,
    0xC9, 0xF8, 0xEB, 0xAD, 0x78, 0x6E, 0xF8, 0x5C, 0x7F, 0xFB, 0xA9, 0xA9, 0xB7, 0x23, 0x58, 0xB2
]

# the key stream
key_stream = [
    [0x85, 0x0F, 0xCD, 0x38, 0x57, 0xDA, 0xDB, 0x72, 0x66, 0xBF, 0xE4, 0x68, 0xAE, 0xDD, 0xE5, 0xAA],
    [0x83, 0x76, 0x01, 0xE6, 0xB7, 0x6E, 0xE5, 0xBF, 0x9E, 0xE8, 0x17, 0x68, 0xF3, 0x4E, 0xAA, 0x47],
    [0x0B, 0xD9, 0x79, 0x85, 0xBA, 0xC4, 0x31, 0x03, 0xCD, 0x75, 0x15, 0x9E, 0xC7, 0xAE, 0x9B, 0x30],
    [0x9F, 0xD3, 0x56, 0x1B, 0x7A, 0x74, 0x68, 0xD5, 0x3F, 0xD5, 0xA1, 0x49, 0x0C, 0x75, 0xCF, 0x9A],
    [0x45, 0xBF, 0x3C, 0xCF, 0xDD, 0xED, 0x23, 0xCA, 0x9B, 0x35, 0x0E, 0xF5, 0xE8, 0xAE, 0x14, 0x78],
    [0x8D, 0x44, 0xB1, 0xCF, 0x4C, 0xFA, 0x89, 0xCA, 0x8F, 0x8E, 0x9E, 0xF9, 0xC8, 0x1C, 0x9A, 0x90],
    [0xE9, 0x1F, 0xEC, 0x44, 0x69, 0x61, 0xC5, 0x8E, 0x1E, 0x79, 0xDA, 0xD6, 0x1B, 0x4C, 0x4C, 0x26]
]


# IP addresses
IP = [ 
    [113, 60,  0, 10], 
    [131, 105, 0, 10], 
    [119, 88,  0, 10], 
    [76,  73,  0, 10], 
    [43,  29,  0, 10], 
    [41,  80,  0, 10],
    [80,  6,   0, 10] 
]

# --------------------------------------------------------------------------------------------------
# RC4 implementation (copy-pasta from https://github.com/bozhu/RC4-Python/blob/master/rc4.py)
#
def KSA(key):
    keylength = len(key)

    S = range(256)

    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % keylength]) % 256
        S[i], S[j] = S[j], S[i]  # swap

    return S

def PRGA(S):
    i, j = 0, 0

    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]  # swap

        K = S[(S[i] + S[j]) % 256]
        yield K

def RC4(key):
    S = KSA(key)
    return PRGA(S)


# --------------------------------------------------------------------------------------------------
def MD5(data):
    m = md5.new()

    if isinstance(data, list):
        m.update(''.join([chr(x) for x in data]))
    else:
        m.update(data)
    
    return m.digest()


# --------------------------------------------------------------------------------------------------
def proc(data, idx):
    print 'Trying: idx = %d, data = %s' % (idx, ' '.join(['%02X' % ord(x) for x in data]))
    
    data = chr(ord(data[0]) + 1) + data[1:]
    data = data[:4] + MD5(data + MD5(IP[idx]))


    if data[0] != '\x07':
        return proc(data, (idx + 3) % 7)


    # generate RC4 key
    key = [a ^ b for (a,b) in zip([ord(x) for x in data[4:]], key_stream[idx])]


    # decrypt advres.dll
    i = 0
    decr = [0]*len(advres)
    for k in RC4(key):
        decr[i] = advres[i] ^ k

        i += 1
        if i >= len(decr):
            break


    # check if decryption is successful
    if decr[0] == 0x4d and decr[1] == 0x5a:
        print 'advres.dll decryption key found:'
        print '\t', ' '.join(['%02X' % x for x in key])
        exit()



# --------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    
    for st in range(7):
        data = '\x00\x00\x00\x00' + MD5(IP[st]) 
        for val in range(8):
            proc(data, val)


# --------------------------------------------------------------------------------------------------
'''
C:\Users\ispo\Desktop>"C:\Python27\python.exe" myfavoritemalware_crack.py
Trying: idx = 0, data = 00 00 00 00 22 65 0B 0E D5 B9 08 5B 10 3B 53 54 74 6B C5 D2
Trying: idx = 3, data = 01 00 00 00 68 FC 34 F5 55 89 78 F6 BD 47 6C 9F B6 FA 53 62
Trying: idx = 6, data = 02 00 00 00 77 7C 06 0B 60 A0 A0 FD 18 18 BC 09 FA 00 96 92
Trying: idx = 2, data = 03 00 00 00 6A 67 E0 BB 4E 92 00 21 22 6F AC DB 7E 04 4E 48
Trying: idx = 5, data = 04 00 00 00 E6 2F 47 8C 40 39 62 98 F0 F0 F3 8C 55 F2 E9 96
Trying: idx = 1, data = 05 00 00 00 E7 10 F0 54 2F B1 BA 88 8E F0 1C 89 E2 96 BA FA
Trying: idx = 4, data = 06 00 00 00 AC 5A 4E 7B 88 DB A3 53 FF E9 FB 36 BF 18 05 15
Trying: idx = 1, data = 00 00 00 00 22 65 0B 0E D5 B9 08 5B 10 3B 53 54 74 6B C5 D2
Trying: idx = 4, data = 01 00 00 00 D5 43 87 0D CC 20 33 CD 7E 61 5D A9 64 8A 23 92
Trying: idx = 0, data = 02 00 00 00 71 A1 D7 54 00 A2 0D 75 5E AD E6 63 9E 3F A2 BE
Trying: idx = 3, data = 03 00 00 00 BC A4 A4 E3 05 31 9C 3E A3 3E CC 35 5C 2A 67 A0
Trying: idx = 6, data = 04 00 00 00 90 44 53 59 5E 5A D0 89 DF 89 74 E9 2D 8C 27 85
Trying: idx = 2, data = 05 00 00 00 4D 11 46 59 3E CF D8 89 C1 51 14 E4 7E 27 F0 F7
Trying: idx = 5, data = 06 00 00 00 47 BA EA 09 16 BF 88 E4 E0 D2 0F E4 6C E7 B6 6D
Trying: idx = 2, data = 00 00 00 00 22 65 0B 0E D5 B9 08 5B 10 3B 53 54 74 6B C5 D2
Trying: idx = 5, data = 01 00 00 00 19 4D 44 E1 FB 1D 51 88 BC D3 58 26 72 63 56 2C
Trying: idx = 1, data = 02 00 00 00 30 DA 6A 13 33 84 83 70 9D 33 09 DC CA B6 9E 83
Trying: idx = 4, data = 03 00 00 00 07 C5 81 B2 10 C6 16 E2 CF 59 26 B8 C1 54 24 AA
Trying: idx = 0, data = 04 00 00 00 BD FD 39 07 AD 72 BC 95 47 9B 46 83 28 7F C5 FB
Trying: idx = 3, data = 05 00 00 00 47 A1 13 A3 13 70 57 DD 7B 64 8F 55 3B A7 EB A6
Trying: idx = 6, data = 06 00 00 00 20 2C 29 53 9C 94 0F F7 4C D6 04 37 D9 10 A5 A7
Trying: idx = 3, data = 00 00 00 00 22 65 0B 0E D5 B9 08 5B 10 3B 53 54 74 6B C5 D2
Trying: idx = 6, data = 01 00 00 00 95 D1 9E 27 DD 34 EE 3E 85 F0 80 38 44 C3 20 FE
Trying: idx = 2, data = 02 00 00 00 41 D9 F5 08 75 60 3D 16 50 E3 AD 2A 84 9D 30 5F
Trying: idx = 5, data = 03 00 00 00 07 88 F7 5F 9F 31 CE B7 1B F2 75 77 3C 49 48 EC
Trying: idx = 1, data = 04 00 00 00 5A 59 CF 85 4B 4D 58 B2 A8 39 0D 31 15 83 17 5D
Trying: idx = 4, data = 05 00 00 00 EF EE 4A 0C F4 D5 67 33 3C 8F 41 A8 23 E2 DF 35
Trying: idx = 0, data = 06 00 00 00 BD 7E 6A 90 36 A9 68 9B 5B 44 6F C4 F2 AF D5 61
advres.dll decryption key found:
        F2 2E 0D 1F 85 67 C6 A4 C8 88 75 4B 1B 46 10 E9

C:\Users\ispo\Desktop>
'''
# --------------------------------------------------------------------------------------------------
